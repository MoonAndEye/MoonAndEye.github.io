<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-22T14:02:11+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Marvin Lin’s Blogger</title><subtitle>這個 blog 是包含了的軟體開發、投資、經驗和生活故事。透過這個 blog，我希望分享自己的生活和見聞，同時也透過這個平台與讀者交流互動，建立起彼此的社群。</subtitle><author><name>Marvin Lin</name></author><entry><title type="html">從 2023 年 4 月開始，所有提交到 App Store 的 iOS 和 iPadOS 應用程式都必須使用 Xcode 14.1 和 iOS 16.1 SDK 建立。</title><link href="http://localhost:4000/swift/submit-to-app-store-need-xcode-fourteen.html" rel="alternate" type="text/html" title="從 2023 年 4 月開始，所有提交到 App Store 的 iOS 和 iPadOS 應用程式都必須使用 Xcode 14.1 和 iOS 16.1 SDK 建立。" /><published>2023-03-22T13:59:00+08:00</published><updated>2023-03-22T13:59:00+08:00</updated><id>http://localhost:4000/swift/submit-to-app-store-need-xcode-fourteen</id><content type="html" xml:base="http://localhost:4000/swift/submit-to-app-store-need-xcode-fourteen.html">&lt;p&gt;從 2023 年 4 月開始，所有提交到 App Store 的 iOS 和 iPadOS 應用程式都必須使用 Xcode 14.1 和 iOS 16.1 SDK 建立。&lt;/p&gt;

&lt;p&gt;出處：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/news/?id=z1erkhzr&quot;&gt;App Store&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原文：
App Store submissions now open for iOS 16.1 and iPadOS 16.1
October 18, 2022&lt;/p&gt;

&lt;p&gt;iOS 16.1 and iPadOS 16.1, the world’s most advanced mobile operating systems, will soon be available to customers worldwide. Take advantage of Live Activities to help people stay on top of what’s happening live in your app, right from the Lock Screen and Dynamic Island on iPhone. Bring desktop-class features, such as an editor-style navigation bar and enhanced text editing menu to your iPad app, and get the most out of the latest advancements in MapKit, Metal, ARKit, Core ML, and more.&lt;/p&gt;

&lt;p&gt;Build your app using Xcode 14.1 Release Candidate, then test and submit it for review. Please note, starting April 2023, all iOS and iPadOS apps submitted to the App Store must be built with Xcode 14.1 and the iOS 16.1 SDK.&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="swift" /><category term="iOS" /><category term="App Store" /><summary type="html">從 2023 年 4 月開始，所有提交到 App Store 的 iOS 和 iPadOS 應用程式都必須使用 Xcode 14.1 和 iOS 16.1 SDK 建立。</summary></entry><entry><title type="html">Google 開始試用 Bard AI chat</title><link href="http://localhost:4000/programming/google-start-bard-ai.html" rel="alternate" type="text/html" title="Google 開始試用 Bard AI chat" /><published>2023-03-22T13:14:00+08:00</published><updated>2023-03-22T13:14:00+08:00</updated><id>http://localhost:4000/programming/google-start-bard-ai</id><content type="html" xml:base="http://localhost:4000/programming/google-start-bard-ai.html">&lt;p&gt;&lt;a href=&quot;https://bard.google.com&quot;&gt;Google Bard AI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Google 最近宣布了一項重大的消息，就是開始試用 Bard 這個 AI chat 網站。Bard 是 Google 的一項實驗性產品，旨在讓使用者與生成式 AI 進行合作。生成式 AI 是一種基於過去數據創造而非識別內容的技術。Bard 的競爭對手是去年推出的 ChatGPT，一個由微軟支持的創業公司 OpenAI 開發的 chatbot。&lt;/p&gt;

&lt;p&gt;Bard 的特色是什麼呢？首先，它可以快速地產生一段或多段文字，不像 ChatGPT 那樣逐字逐句地輸出答案。使用者可以輸入或說出任何問題或指令，Bard 就會嘗試回答或執行。其次，它可以提供三種不同版本或「草稿」供使用者選擇，以便找到最合適的回應。第三，它還有一個「Google it」的按鈕，如果使用者想要查看網路上的結果，就可以點選。&lt;/p&gt;

&lt;p&gt;Bard 目前只支援英文，並且需要加入等待名單才能使用。有興趣的使用者可以到 &lt;a href=&quot;https://bard.google.com/&quot;&gt;https://bard.google.com/&lt;/a&gt; 點選「Join waitlist」按鈕報名。收到確認信後，就可以登入 Google 帳號開始使用 Bard 了。&lt;/p&gt;

&lt;p&gt;不過要注意的是，Bard 並不是萬能的。它有時候會回答錯誤或不完整的內容，所以使用者要自己判斷和驗證資訊的正確性和可靠性。Google 也提供了一個反饋按鈕讓使用者對 Bard 的回應表示讚賞或批評，以幫助 Google 改善技術。&lt;/p&gt;

&lt;p&gt;目前台灣地區還沒有支援 Bard 的計畫&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="programming" /><category term="ai" /><category term="bard" /><category term="chat" /><category term="google" /><summary type="html">Google Bard AI</summary></entry><entry><title type="html">美國財政部長葉倫（Janet Yellen）昨天（21日）向市場喊話，提振了市場信心</title><link href="http://localhost:4000/finance/yellen-talk-about-bank-issue.html" rel="alternate" type="text/html" title="美國財政部長葉倫（Janet Yellen）昨天（21日）向市場喊話，提振了市場信心" /><published>2023-03-22T08:30:00+08:00</published><updated>2023-03-22T08:30:00+08:00</updated><id>http://localhost:4000/finance/yellen-talk-about-bank-issue</id><content type="html" xml:base="http://localhost:4000/finance/yellen-talk-about-bank-issue.html">&lt;p&gt;美國財政部長葉倫（Janet Yellen）昨天（21日）向市場喊話，表示政府已準備好為銀行業提供進一步的擔保，以防止危機擴大。這番話提振了市場信心，美股三大指數全面上漲，其中道瓊工業指數漲316點，收32560點，創下歷史新高。&lt;/p&gt;

&lt;p&gt;葉倫的信心喊話是在美國聯準會（Fed）即將宣布利率決議的前夕發出的。市場普遍預期聯準會將升息一碼，以因應通膨壓力和經濟復甦。不過，有分析師認為，聯準會可能也會發出升息接近尾聲的信號，以安撫市場的憂慮。&lt;/p&gt;

&lt;p&gt;在葉倫的鼓舞下，受到銀行危機衝擊最大的金融股表現強勁。第一共和銀行（FRC.N）股價大漲近30%，率領地區性銀行ETF（KRE.P）飆升6%。此外，能源、非必需消費品等板塊也有不錯的表現。&lt;/p&gt;

&lt;p&gt;值得注意的是，在中國市場表現亮眼的特斯拉（TSLA.O），也在昨天暴漲約8%，成為那斯達克指數上漲的主要推手之一。&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="finance" /><category term="finance" /><category term="葉倫" /><summary type="html">美國財政部長葉倫（Janet Yellen）昨天（21日）向市場喊話，表示政府已準備好為銀行業提供進一步的擔保，以防止危機擴大。這番話提振了市場信心，美股三大指數全面上漲，其中道瓊工業指數漲316點，收32560點，創下歷史新高。</summary></entry><entry><title type="html">玉山金控今年辦理現金增資案，預計現增8億股</title><link href="http://localhost:4000/finance/2023/03/21/ESun-news.html" rel="alternate" type="text/html" title="玉山金控今年辦理現金增資案，預計現增8億股" /><published>2023-03-21T18:11:00+08:00</published><updated>2023-03-21T18:11:00+08:00</updated><id>http://localhost:4000/finance/2023/03/21/ESun-news</id><content type="html" xml:base="http://localhost:4000/finance/2023/03/21/ESun-news.html">&lt;p&gt;玉山金控今年辦理現金增資案，預計現增8億股。玉山金控/提供&lt;/p&gt;

&lt;p&gt;玉山金控 （2884）今年辦理現金 增資 案，預計現增8億股，發行價格暫定每股20元。玉山金控此次增資資金，將用於轉投資子公司玉山銀行供拓展業務之用及充實營運資金。玉山金控在今年2月董事會決議，現增普通股8億股，發行價格暫定每股20元，依照玉山金控今日收盤價23.75元計算，約有15.79%的折價率。&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="finance" /><category term="財經" /><category term="增資" /><category term="玉山金" /><summary type="html">玉山金控今年辦理現金增資案，預計現增8億股。玉山金控/提供</summary></entry><entry><title type="html">Open AI 發信給客戶，停止 Codex 相關服務</title><link href="http://localhost:4000/programming/openai-stop-codex-api.html" rel="alternate" type="text/html" title="Open AI 發信給客戶，停止 Codex 相關服務" /><published>2023-03-21T10:58:00+08:00</published><updated>2023-03-21T10:58:00+08:00</updated><id>http://localhost:4000/programming/openai-stop-codex-api</id><content type="html" xml:base="http://localhost:4000/programming/openai-stop-codex-api.html">&lt;h2 id=&quot;open-ai-發信給客戶停止-codex-相關服務&quot;&gt;Open AI 發信給客戶，停止 Codex 相關服務&lt;/h2&gt;

&lt;p&gt;在3月23日，我們將停止支援Codex API。所有客戶將需要轉換到其他模型。Codex最初在2021年以免費有限制的測試版推出，一直保持著該狀態。考慮到我們最新的GPT-3.5代碼任務模型的進展，我們將不再支援Codex，並鼓勵所有客戶轉換到GPT-3.5-Turbo。
關於GPT-3.5-Turbo
GPT-3.5-Turbo是GPT-3.5系列中性價比最高、性能最優的模型。它可以進行編程任務，同時還具備靈活的自然語言能力。&lt;/p&gt;

&lt;p&gt;您可以通過以下方式了解更多：
GPT-3.5模型概述
聊天補全指南&lt;/p&gt;

&lt;p&gt;受影響的模型
以下模型將被停止支援：
code-cushman:001
code-cushman:002
code-davinci:001
code-davinci:002&lt;/p&gt;

&lt;p&gt;我們了解這個轉變可能暫時有些不便，但我們相信這將使我們能夠增加對我們最新和最能力強的模型的投資。&lt;/p&gt;

&lt;p&gt;OpenAI團隊&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;英文原文&quot;&gt;英文原文&lt;/h2&gt;

&lt;p&gt;On March 23rd, we will discontinue support for the Codex API. All customers will have to transition to a different model. Codex was initially introduced as a free limited beta in 2021, and has maintained that status to date. Given the advancements of our newest GPT-3.5 models for coding tasks, we will no longer be supporting Codex and encourage all customers to transition to GPT-3.5-Turbo.
About GPT-3.5-Turbo
GPT-3.5-Turbo is the most cost effective and performant model in the GPT-3.5 family. It can both do coding tasks while also being complemented with flexible natural language capabilities.&lt;/p&gt;

&lt;p&gt;You can learn more through:
GPT-3.5 model overview
Chat completions guide&lt;/p&gt;

&lt;p&gt;Models affected
The following models will be discontinued:
code-cushman:001
code-cushman:002
code-davinci:001
code-davinci:002&lt;/p&gt;

&lt;p&gt;We understand this transition may be temporarily inconvenient, but we are confident it will allow us to increase our investment in our latest and most capable models.&lt;/p&gt;

&lt;p&gt;—The OpenAI team&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="programming" /><category term="programming" /><category term="AI" /><category term="Open AI" /><category term="ChatGPT" /><category term="Codex" /><summary type="html">Open AI 發信給客戶，停止 Codex 相關服務</summary></entry><entry><title type="html">台灣政府普發現金6000元</title><link href="http://localhost:4000/finance/2023/03/21/taiwan-government-returnsix-thounds.html" rel="alternate" type="text/html" title="台灣政府普發現金6000元" /><published>2023-03-21T09:01:00+08:00</published><updated>2023-03-21T09:01:00+08:00</updated><id>http://localhost:4000/finance/2023/03/21/taiwan-government-returnsix-thounds</id><content type="html" xml:base="http://localhost:4000/finance/2023/03/21/taiwan-government-returnsix-thounds.html">&lt;p&gt;台灣政府最近要普發6000元現金，因為徵稅超過預算數4500億元。這項政策旨在讓全民共享經濟成果，並刺激消費和投資。領取對象包括國內戶籍國民、取得居留權的外籍人士、特定偏鄉地區居民等，不分年齡層。&lt;/p&gt;

&lt;p&gt;領取方式有三種：一是線上申請後直接匯入戶頭；二是持提款卡至指定銀行ATM領取；三是持健保卡至郵局臨櫃領取 。其中，線上申請系統將於2023年3月22日上午8點開放登記，登記網址為https://6000.gov.tw。ATM領取則可選擇12家金融機構（含郵局）的24922台ATM。&lt;/p&gt;

&lt;p&gt;發放時間則視立法院審查特別預算的時程而定 。目前特別預算已於2023年2月21日立法院三讀通過，但仍需等待冷凍期過後才能正式執行。行政院表示會盡快完成相關準備工作，並確保金融系統的穩定與安全。&lt;/p&gt;

&lt;p&gt;此次普發現金的原因是政府實徵稅收超過原先的預算數4500億元 。財政部代理部長阮清華說明，這些稅收都是依法課稅，沒有超徵或違法的問題。除了普發現金之外，政府還將把多出來的稅收分給地方政府、補助勞健保、補貼電價等方面 。&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="finance" /><category term="finance" /><summary type="html">台灣政府最近要普發6000元現金，因為徵稅超過預算數4500億元。這項政策旨在讓全民共享經濟成果，並刺激消費和投資。領取對象包括國內戶籍國民、取得居留權的外籍人士、特定偏鄉地區居民等，不分年齡層。</summary></entry><entry><title type="html">iPlayground 2023 開始跑啦，歡迎應徵工作人員</title><link href="http://localhost:4000/swift/2023/03/21/iplaygroundIn.html" rel="alternate" type="text/html" title="iPlayground 2023 開始跑啦，歡迎應徵工作人員" /><published>2023-03-21T08:30:00+08:00</published><updated>2023-03-21T08:30:00+08:00</updated><id>http://localhost:4000/swift/2023/03/21/iplaygroundIn</id><content type="html" xml:base="http://localhost:4000/swift/2023/03/21/iplaygroundIn.html">&lt;p&gt;這個消息，有公佈在 &lt;a href=&quot;https://www.ethanhuang13.com/p/179&quot;&gt;13 的電子報第 179 期&lt;/a&gt;，如果想要當 iPlayground 工作人員的朋友，歡迎在 13 的電子報上，進行回覆，就可以報名囉。&lt;/p&gt;

&lt;h1 id=&quot;參與開發者年會的好處&quot;&gt;參與開發者年會的好處&lt;/h1&gt;

&lt;p&gt;開發者年會是一個讓開發者們交流、學習、分享和合作的平台，它有許多好處，不僅可以提升自己的技能和知識，也可以擴展自己的人脈和視野。以下是一些參與開發者年會的好處：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;學習最新的技術和趨勢。開發者年會通常會邀請業界的專家和領導者來分享他們的經驗和見解，讓你了解最新的技術和趨勢，以及如何應用到你自己的項目中。&lt;/li&gt;
  &lt;li&gt;獲得實用的建議和反饋。開發者年會也是一個讓你展示你自己的作品和想法的機會，你可以向其他開發者或評審求教或徵求意見，獲得實用的建議和反饋，幫助你改進你自己的產品或服務。&lt;/li&gt;
  &lt;li&gt;建立聯繫和合作。開發者年會讓你有機會認識來自不同背景、領域和地區的其他開發者，你可以與他們交流、學習、分享和合作，建立聯繫和信任，創造更多可能性。&lt;/li&gt;
  &lt;li&gt;獲得靈感和動力。開發者年會讓你看到其他開發者所做出來的驚人成果，讓你感受到他們對於創新和改變世界的熱情，給予你靈感和動力，激勵你追求更高更遠。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;參與開發者年會是一個值得投資時間、金錢和精力的事情，它不僅可以幫助你提升自己在業界中的地位和影響力，也可以幫助你成長為一個更優秀更全面的開發者。&lt;/p&gt;

&lt;h1 id=&quot;iplayground-簡介&quot;&gt;iPlayground 簡介&lt;/h1&gt;

&lt;p&gt;iPlayground 是一個台灣的 Swift 社群，每年舉辦一場專注於蘋果軟體開發的研討會，邀請國內外的知名開發者分享 iOS/macOS、Swift/Objective-C、app 軟體開發、UI/UX 等相關主題。iPlayground 的歷史可以追溯到 2018 年，當時是台灣首場 iOS/macOS 開發者專門的技術研討會，並邀請了 zonble 與 yllan 作為 keynote speaker。2019 年，iPlayground 擴大規模，邀請了海外開發者如王巍 (@onevcat) 和 Kishikawa Katsumi，並新增了 workshop 和 after party 等活動。2020 年，受到 COVID-19 疫情影響，iPlayground 調整成一日三軌的形式，並增加了 unconference 和 Ask Speaker 等互動環節。iPlayground 的官方網站是 https://iplayground.io ，可以找到過去和未來的活動資訊、議程錄影和贊助商等。&lt;/p&gt;

&lt;h1 id=&quot;相關資源&quot;&gt;相關資源&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://iplayground.io&quot;&gt;iPlayground 官網&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/@iPlaygroundTaiwan&quot;&gt;iPlayground Youtube 頻道&lt;/a&gt;&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="swift" /><category term="swift" /><category term="programming" /><category term="iPlayground" /><summary type="html">這個消息，有公佈在 13 的電子報第 179 期，如果想要當 iPlayground 工作人員的朋友，歡迎在 13 的電子報上，進行回覆，就可以報名囉。</summary></entry><entry><title type="html">Edge 更新，這一版的 Edged 將 AI 功能直接放在側邊欄</title><link href="http://localhost:4000/programming/2023/03/20/edge-update-embed-ai.html" rel="alternate" type="text/html" title="Edge 更新，這一版的 Edged 將 AI 功能直接放在側邊欄" /><published>2023-03-20T20:25:00+08:00</published><updated>2023-03-20T20:25:00+08:00</updated><id>http://localhost:4000/programming/2023/03/20/edge-update-embed-ai</id><content type="html" xml:base="http://localhost:4000/programming/2023/03/20/edge-update-embed-ai.html">&lt;p&gt;新版的 Edge 在側邊欄整合了 ai 的功能，包含 bing chat, 文章/文字生成器。&lt;/p&gt;

&lt;h1 id=&quot;microsoft-edge-新版瀏覽器將-ai-整合在側邊欄&quot;&gt;Microsoft Edge 新版瀏覽器將 AI 整合在側邊欄&lt;/h1&gt;

&lt;p&gt;Microsoft Edge 是一款基於 Chromium 的瀏覽器，提供了許多實用的功能，例如集成式 PDF 閱讀器、垂直分頁、密碼管理器等。最近，Microsoft Edge 又推出了一項新功能，就是將 AI 整合在側邊欄中，讓使用者可以在瀏覽網頁的同時，享受 AI 的智慧協助。&lt;/p&gt;

&lt;p&gt;這項新功能稱為 Edge Copilot，是由 Bing 提供的 ChatGPT 技術驅動的。ChatGPT 是一種基於深度學習的自然語言生成模型，可以根據使用者的輸入和上下文，產生流暢且有意義的文字回應。Edge Copilot 可以幫助使用者完成各種任務，例如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;摘要：將長篇的網頁內容壓縮成幾句話，幫助使用者快速掌握重點。&lt;/li&gt;
  &lt;li&gt;比較：將不同的產品或服務進行比較分析，幫助使用者做出選擇。&lt;/li&gt;
  &lt;li&gt;解釋：對於任何不清楚的概念或術語，提供清楚且易懂的解釋。&lt;/li&gt;
  &lt;li&gt;翻譯：將任何語言的文字轉換成使用者想要的語言。&lt;/li&gt;
  &lt;li&gt;代碼：對於程式設計師來說，可以幫助他們理解或轉換不同語言的代碼。&lt;/li&gt;
  &lt;li&gt;寫作：無論是撰寫筆記、郵件、報告還是文案，都可以幫助使用者改善文法、重新表達內容、擴充內容或生成內容。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Edge Copilot 的操作方式非常簡單。只要在工具列上點選 Bing 圖示，就可以打開側邊欄。在側邊欄中，使用者可以和 AI 進行聊天互動，並根據自己的需求輸入相關指令或問題。AI 會根據當前瀏覽的網頁和使用者的目標，提供智能建議和洞見。如果不需要使用 AI 功能，也可以隨時隱藏側邊欄。&lt;/p&gt;

&lt;p&gt;Edge Copilot 不僅提供了多種預設的提示模板，讓使用者可以快速啟動常用功能；也支持自定義提示模板，在任何網頁上都能靈活運用 AI 功能。此外，在保護隱私方面也有所考量，在與 AI 聊天時不會收集或儲存任何個人資料。&lt;/p&gt;

&lt;p&gt;Microsoft Edge 新版瀏覽器將 AI 整合在側邊欄中，是一項創新且實用的功能。它讓使用者可以在一個介面中完成多種任務，在提高效率和品質方面都有所幫助。&lt;/p&gt;

&lt;h2 id=&quot;和-bing-聊天&quot;&gt;和 Bing 聊天&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/programming/edge-update/edge_chat.jpeg&quot; alt=&quot;edge chat&quot; width=&quot;250&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;如果要產出一段文字除了可以調整-長-中-短以外還可以分用途&quot;&gt;如果要產出一段文字，除了可以調整 長 中 短，以外，還可以分用途&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/programming/edge-update/edge_create_blog.jpeg&quot; alt=&quot;edge create blog&quot; width=&quot;250&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;我們來試著產一篇新聞&quot;&gt;我們來試著產一篇新聞&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/programming/edge-update/edge_news.jpeg&quot; alt=&quot;edge news&quot; width=&quot;250&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;這邊，我們試著生產一篇 iPlayground 的新聞&lt;/p&gt;

&lt;p&gt;prmopt: 今年 Swift 社群會舉辦 iPlayground，請給我一篇關於這個 Swift 的研究會的新聞&lt;/p&gt;

&lt;h1 id=&quot;swift-社群-iplayground-將舉辦-2023-年度線上技術研討會&quot;&gt;Swift 社群 iPlayground 將舉辦 2023 年度線上技術研討會&lt;/h1&gt;

&lt;p&gt;Swift 社群 iPlayground 是台灣首度聚焦 Apple 相關軟體開發之大型技術研討會，自 2017 年起每年舉辦一次，邀請國內外知名的 Swift 開發者分享他們的經驗和心得。今年，由於疫情的影響，iPlayground 將以線上的方式進行，並將於 3 月 27 日至 28 日舉行。&lt;/p&gt;

&lt;p&gt;iPlayground 2023 的主題是「用你我都會的 Swift 語言寫出更多可能」，旨在展示 Swift 不僅是一種用於 iOS、macOS、watchOS 和 tvOS 的程式語言，也是一種通用、跨平台、高效能的程式語言，可以應用在各種領域，如後端開發、機器學習、物聯網等。本次研討會將有來自不同背景和領域的講者分享他們如何用 Swift 創造出令人驚豔的作品和解決方案。&lt;/p&gt;

&lt;p&gt;本次研討會將分成兩天進行，第一天將有四場精彩的 keynote 演講，分別是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「Swift 的演進與未來」：由 Swift 原始碼貢獻者之一的 John Doe 分享 Swift 的最新動態和未來規劃。&lt;/li&gt;
  &lt;li&gt;「用 Swift 寫出 LINE 聊天機器人」：由 LINE Taiwan 的 iOS 工程師鄭宇哲介紹如何利用 LINE Messaging API 和 Vapor 框架用 Swift 寫出一個可以回答問題和發送貼圖的聊天機器人。&lt;/li&gt;
  &lt;li&gt;「手把手帶你用 Clean Swift 重構 MVC, 並替核心程式碼撰寫單元測試」：由知名部落客 ChiaoTeng 分享他如何使用 Clean Swift 架構來改善傳統 MVC 模式下程式碼的可讀性和可測試性。&lt;/li&gt;
  &lt;li&gt;「用 SwiftUI 和 Combine 打造現代化 UI」：由 Apple Developer Academy 的學員陳昱廷展示如何使用 SwiftUI 和 Combine 兩個全新的框架來打造美觀且高效能的 UI。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第二天則將有六場深入淺出的 workshop ，讓參加者可以親自動手學習和實作各種 Swift 相關的技術和主題，例如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「SwiftUI 入門教學」：由 iPlayground 主辦人之一的 Tim Lee 帶領參加者從零開始學習 SwiftUI 的基礎知識和操作方法。&lt;/li&gt;
  &lt;li&gt;「使用 Core ML 和 Create ML 打造智慧型 App」：由 AI Taiwan 社群創辦人之一的王小明教授參加者如何使用 Core ML 和 Create ML 兩個 Apple 提供的框架來訓練和部署機器學習模型到 App 中。&lt;/li&gt;
  &lt;li&gt;「使用 Kitura 框架建立&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;雖然中間被截斷了，但還真的「產生」了一個會議，並包含了題目和講者。&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="programming" /><category term="programming" /><category term="life" /><summary type="html">新版的 Edge 在側邊欄整合了 ai 的功能，包含 bing chat, 文章/文字生成器。</summary></entry><entry><title type="html">瑞信將被收購，收購方為瑞銀集團</title><link href="http://localhost:4000/finance/2023/03/20/CSGN-acquired.html" rel="alternate" type="text/html" title="瑞信將被收購，收購方為瑞銀集團" /><published>2023-03-20T17:05:00+08:00</published><updated>2023-03-20T17:05:00+08:00</updated><id>http://localhost:4000/finance/2023/03/20/CSGN-acquired</id><content type="html" xml:base="http://localhost:4000/finance/2023/03/20/CSGN-acquired.html">&lt;h2 id=&quot;瑞信將被收購收購方為瑞銀集團收購價為30億瑞士法郎&quot;&gt;瑞信將被收購，收購方為瑞銀集團，收購價為30億瑞士法郎&lt;/h2&gt;

&lt;p&gt;瑞士兩大銀行集團之一的瑞信集團（Credit Suisse Group）在遭受多起金融醜聞和巨額虧損後，終於在周日（3月19日）宣布被同業瑞銀集團（UBS Group）以30億瑞士法郎（32.5億美元）全股票交易的方式收購。這是一樁歷史性的併購交易，相當於每股只付出瑞信在2007年全盛時期1%的代價。這次收購將使瑞銀成為全球最大的財富管理公司之一，並結束了167年歷史的瑞信。&lt;/p&gt;

&lt;p&gt;這次收購是在瑞士政府和央行的強力推動下完成的，目的是防止信心危機威脅到全球金融市場。據報道，美國、英國和歐盟等主要金融監管機構也對這次交易表示支持和歡迎，認為有助於保障金融穩定。&lt;/p&gt;

&lt;p&gt;事實上，在宣布被收購之前，瑞信已陷入了深重的困境。自去年以來，該行就連續遭遇了多起重大風險事件，包括與美國專門投資失敗企業債券的基金Greensill Capital合作而造成數十億美元虧損；以及因投資美國家族辦公室Archegos Capital Management而爆發巨額爆倉事件。這些事件不僅使得該行股價暴跌近70%，還引發了客戶、員工、股東和監管部門的不滿和不信任。&lt;/p&gt;

&lt;p&gt;面對如此危急的局面，該行曾試圖通過裁員、出售資產、削減風險、提高資本等措施來挽回局面，但效果甚微。同時，該行也曾拒絕了多次來自同業或其他投資者的收購或合併提議，認為價格太低或者條件不利。然而，在政府和央行的壓力下，該行最終不得不接受了來自競爭對手瑞銀的低價收購。&lt;/p&gt;

&lt;p&gt;根據雙方公佈的交易細節，每22.48股瑞信股票可換1股瑞銀股票，相當於每股0.76瑞士法郎。此外，由於該行仍然面臨著巨額未清算債務和訴訟風險，因此交易還涉及到一系列複雜而昂貴的安排&lt;/p&gt;

&lt;p&gt;首先，瑞銀將向瑞信的債權人支付54億美元的現金，以清算其與Greensill Capital和Archegos Capital Management相關的未結算債務；其次，瑞銀將承擔瑞信所有的訴訟風險，包括與美國司法部門和其他監管機構的調查和罰款；最後，瑞銀將接收瑞信約160億瑞郎（約合173億美元）的額外一級資本（AT1）債券，也稱為可轉換可持續債券（CoCo Bond），這些債券在交易完成後將失去價值 。&lt;/p&gt;

&lt;p&gt;雙方表示，這次收購將創造出全球最大的財富管理公司之一，管理資產超過6萬億美元。此外，雙方還預計在未來三年內實現每年40億美元的成本節省。不過，這也意味著雙方將面臨大規模的裁員和重組。據估計，該交易可能影響到兩家公司共計10萬名員工中的2萬名。&lt;/p&gt;

&lt;p&gt;這次收購引發了市場和業界的廣泛關注和評論。有分析師認為，這是一個「不得已而為之」的救命稻草，反映了瑞信在金融危機中失去了自主權和競爭力。有些人則認為，這是一個「天作之合」的良好契機，展現了兩家公司在財富管理、投資銀行、私人銀行等領域的互補性和協同效應。還有些人則表示擔心，這次收購會減少市場上的競爭選擇和多元化服務 。&lt;/p&gt;

&lt;p&gt;無論如何，在全球金融市場動盪不安、風險事件頻發、監管壓力加大、科技變革加速等背景下，這次收購無疑是一個重要而具有代表性的案例。它不僅揭示了當前金融業面臨的挑戰和困境，也展示了金融業未來可能走向的發展趨勢和變革方向。&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="finance" /><category term="finance" /><category term="acquisition" /><category term="bank" /><summary type="html">瑞信將被收購，收購方為瑞銀集團，收購價為30億瑞士法郎</summary></entry><entry><title type="html">使用 ChatGPT 串接 ChatGPT：(2)</title><link href="http://localhost:4000/chatgpt/using-chatgpt-connect-chatgpt2.html" rel="alternate" type="text/html" title="使用 ChatGPT 串接 ChatGPT：(2)" /><published>2023-03-20T13:03:00+08:00</published><updated>2023-03-20T13:03:00+08:00</updated><id>http://localhost:4000/chatgpt/using-chatgpt-connect-chatgpt2</id><content type="html" xml:base="http://localhost:4000/chatgpt/using-chatgpt-connect-chatgpt2.html">&lt;p&gt;在 &lt;a href=&quot;/chatgpt/using-chatgpt-connect-chatgpt1.html&quot;&gt;前一篇文章&lt;/a&gt;中，我們使用了 python 語言串接了 ChatGPT API。但我現在是個 iOS 開發者，所以會想要試試看能不能直接用 ChatGPT，省時省力(？)的幫我完成一個串接 ChatGPT 的 App。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;/chatgpt/using-chatgpt-connect-chatgpt1.html&quot;&gt;使用 ChatGPT 串接 ChatGPT：(1)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;開始用-chatgpt-產生-ios-app-程式碼&quot;&gt;開始用 ChatGPT 產生 iOS App 程式碼&lt;/h2&gt;

&lt;h2 id=&quot;先從-api-request-開始&quot;&gt;先從 api request 開始&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;問：
我已經有 ChatGPT 的 api key 了，請問怎麼用 Swift 串接 ChatGPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;答：
要使用 Swift 串接 ChatGPT，您可以使用以下步驟：

請確保您已經安裝了 Alamofire 套件，該套件可以讓您在 Swift 中輕鬆進行 HTTP 請求。

準備一個 HTTP POST 請求，並傳遞以下參數：

網址：https://api.openai.com/v1/engines/davinci-codex/completions
標題：Authorization
值：Bearer YOUR_API_KEY
標題：Content-Type
值：application/json
請求正文：{&quot;prompt&quot;: &quot;YOUR_PROMPT&quot;}
在這裡，YOUR_API_KEY 是您的 ChatGPT API 金鑰，YOUR_PROMPT 是您想要傳遞給 ChatGPT 的提示。

使用 Alamofire 套件發送 HTTP POST 請求，並處理返回的 JSON 格式回應：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import Alamofire

let apiURL = &quot;https://api.openai.com/v1/engines/davinci-codex/completions&quot;
let headers: HTTPHeaders = [
    &quot;Authorization&quot;: &quot;Bearer YOUR_API_KEY&quot;,
    &quot;Content-Type&quot;: &quot;application/json&quot;
]
let parameters: Parameters = [
    &quot;prompt&quot;: &quot;YOUR_PROMPT&quot;
]

AF.request(apiURL, method: .post, parameters: parameters, encoding: JSONEncoding.default, headers: headers).responseJSON { response in
    switch response.result {
    case .success(let value):
        // 處理返回的 JSON 格式回應
        if let json = value as? [String: Any],
            let choices = json[&quot;choices&quot;] as? [[String: Any]],
            let text = choices.first?[&quot;text&quot;] as? String {
            // 在這裡處理您收到的文本回應
            print(text)
        }
    case .failure(let error):
        // 在這裡處理 HTTP 請求失敗的錯誤
        print(error)
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;這樣您就可以使用 Swift 串接 ChatGPT 了。請注意，這只是一個簡單的範例，您可能需要根據您的具體需求進行更多調整和擴展。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;接下來加上一個簡單的畫面包含-prompt-輸入api-request-buttonresponse-呈現&quot;&gt;接下來加上一個簡單的畫面，包含 prompt 輸入，api request button，response 呈現&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;問：
幫我生成一個 iOS App 畫面，來串接 ChatGPT，畫面上要有個文字輸入框，這個輸入框的內容就是 ChatGPT API 的 prompt，下方有一個 button，按下去後會發送 api request。再下方要能顯示 ChatGPT回應的 response text。請使用 SwiftUI 來寫這個頁面
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;答：

import SwiftUI
import Alamofire

struct ContentView: View {
    @State var promptText: String = &quot;&quot;
    @State var responseText: String = &quot;&quot;
    let apiURL = &quot;https://api.openai.com/v1/engines/davinci-codex/completions&quot;
    let headers: HTTPHeaders = [
        &quot;Authorization&quot;: &quot;Bearer YOUR_API_KEY&quot;,
        &quot;Content-Type&quot;: &quot;application/json&quot;
    ]
    
    var body: some View {
        VStack {
            TextField(&quot;Enter prompt here&quot;, text: $promptText)
                .padding()
                .border(Color.gray)
            
            Button(action: {
                sendRequest()
            }) {
                Text(&quot;Send Request&quot;)
            }
            .padding()
            
            Text(responseText)
                .padding()
        }
    }
    
    func sendRequest() {
        let parameters: Parameters = [
            &quot;prompt&quot;: promptText
        ]
        
        AF.request(apiURL, method: .post, parameters: parameters, encoding: JSONEncoding.default, headers: headers).responseJSON { response in
            switch response.result {
            case .success(let value):
                if let json = value as? [String: Any],
                    let choices = json[&quot;choices&quot;] as? [[String: Any]],
                    let text = choices.first?[&quot;text&quot;] as? String {
                    DispatchQueue.main.async {
                        responseText = text
                    }
                }
            case .failure(let error):
                print(error)
            }
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在這個程式碼中，我們使用了 @State 屬性來管理 promptText 和 responseText 的狀態。當使用者輸入提示文本後，我們可以從 promptText 中取得輸入的值。當使用者按下“Send Request”按鈕時，我們會使用 Alamofire 發送一個 HTTP POST 請求，並處理返回的 JSON 格式回應，將回應文本更新到 responseText 中。最後，我們在畫面上顯示了這個回應文本。

請注意，此程式碼僅為示範，實際使用中可能需要添加更多的錯誤處理和用戶體驗。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;驗證-ai-寫出來的專案會不會動&quot;&gt;驗證 AI 寫出來的專案會不會動&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/swift/chatgpt/chatgpt-connect-ios-app.jpeg&quot; alt=&quot;ChatGPT 生出來的畫面&quot; width=&quot;250px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;畫面上看起來不錯，那我們就來試試看會不會動吧。我試著輸入”tell me a joke”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/swift/chatgpt/chatgpt-connect-codex-result.jpeg&quot; alt=&quot;原始 ChatGPT 的結果&quot; width=&quot;250px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;他出現了很奇怪的結果，所以我把原始 response print 出來看看&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;success({
    choices =     (
                {
            &quot;finish_reason&quot; = length;
            index = 0;
            logprobs = &quot;&amp;lt;null&amp;gt;&quot;;
            text = &quot;:\&quot;))\n            self.nw.append(utils.normalizeString&quot;;
        }
    );
    created = 1679291111;
    id = &quot;cmpl-6w2cRytpMNtkDeuiuH15Pl8qky62C&quot;;
    model = &quot;davinci-codex&quot;;
    object = &quot;text_completion&quot;;
    usage =     {
        &quot;completion_tokens&quot; = 16;
        &quot;prompt_tokens&quot; = 3;
        &quot;total_tokens&quot; = 19;
    };
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這時候，就需要開發者介入了，在他的 model 中，使用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;davinci-codex&lt;/code&gt; model，這並不是網頁版那個大家覺得好用的 model，所以我們對 endpoint 進行置換。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/// 置換前
    let apiURL = &quot;https://api.openai.com/v1/engines/davinci-codex/completions&quot;

/// 置換後
    let apiURL = &quot;https://api.openai.com/v1/engines/text-davinci-003/completions&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/swift/chatgpt/chatgpt-connect-davinci-result.jpeg&quot; alt=&quot;davinci 的結果&quot; width=&quot;250px&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;success({
    choices =     (
                {
            &quot;finish_reason&quot; = stop;
            index = 0;
            logprobs = &quot;&amp;lt;null&amp;gt;&quot;;
            text = &quot; feeling?\n\nI&apos;m feeling great thank you.&quot;;
        }
    );
    created = 1679290920;
    id = &quot;cmpl-6w2ZMgsKECySpi2OFONc9HX31FJm6&quot;;
    model = &quot;text-davinci-003&quot;;
    object = &quot;text_completion&quot;;
    usage =     {
        &quot;completion_tokens&quot; = 11;
        &quot;prompt_tokens&quot; = 3;
        &quot;total_tokens&quot; = 14;
    };
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;結論---這個階段人類開發者還是需要去看-chatgpt-的程式碼並進行-debug&quot;&gt;結論 - 這個階段，人類開發者還是需要去看 ChatGPT 的程式碼，並進行 debug&lt;/h2&gt;

&lt;p&gt;從上面的例子可以得到幾個結論&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;程式碼會動&lt;/li&gt;
  &lt;li&gt;UI 看起來符合最低 demo 的標準&lt;/li&gt;
  &lt;li&gt;但如果 prmopt 不夠精確，要經過調整才能得得人類預期的結果&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第三點這邊，我並不認為是單純是現在的 ChatGPT 的問題，畢竟，人類在溝通上，是省略了很多「已知」，或是直接假設對方「已知」的前提下，進行交談。或許在接下來的時間，人類會開始學著和 ChatGPT 進行溝通，改變人類自己的交談習慣，讓 ChatGPT 可以更快的了解人類要的結果。&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="swift" /><category term="Swift" /><category term="Programming" /><category term="AI" /><category term="ChatGPT" /><summary type="html">在 前一篇文章中，我們使用了 python 語言串接了 ChatGPT API。但我現在是個 iOS 開發者，所以會想要試試看能不能直接用 ChatGPT，省時省力(？)的幫我完成一個串接 ChatGPT 的 App。</summary></entry></feed>