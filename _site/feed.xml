<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-05-30T22:29:59+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Marvin 的程式開發筆記</title><subtitle>這個 blog 是包含了的軟體開發、投資、經驗和生活故事。透過這個 blog，我希望分享自己的生活和見聞，同時也透過這個平台與讀者交流互動，建立起彼此的社群。</subtitle><author><name>Marvin Lin</name></author><entry><title type="html">輪到我可以下載 ChatGPT macOS 應用程式</title><link href="http://localhost:4000/programming/you-can-download-chatgpt.html" rel="alternate" type="text/html" title="輪到我可以下載 ChatGPT macOS 應用程式" /><published>2024-05-30T22:09:00+08:00</published><updated>2024-05-30T22:09:00+08:00</updated><id>http://localhost:4000/programming/you-can-download-chatgpt</id><content type="html" xml:base="http://localhost:4000/programming/you-can-download-chatgpt.html">&lt;h2 id=&quot;如果你有交-chatgpt-月費去看看-chatgpt-的網頁界面如果你看到下載按鈕恭喜你你可以下載-macos-應用程式了&quot;&gt;如果你有交 ChatGPT 月費，去看看 ChatGPT 的網頁界面，如果你看到下載按鈕，恭喜你，你可以下載 macOS 應用程式了。&lt;/h2&gt;

&lt;p&gt;總算輪到我下載 ChatGPT macOS App，大家如果有看到下載按鈕，就可以下載 macOS 應用程式了。我在 twitter 上看到很多人試著去看這個 app 是哪個框架做的。看別人的分析，這個 ChatGPT App 是純 SwiftUI 寫的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/programming/openai/can-download-chatgpt-on-macos.png&quot; alt=&quot;ChatGPT macOS App&quot; /&gt;&lt;/p&gt;

&lt;p&gt;桌面 App 除了保有/同步 ChatGPT 的歷史紀錄，還可以直接在 App 內使用 GPTs&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/programming/openai/gpts.png&quot; alt=&quot;App 內可以使用 GPTs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這邊嘗試用 ChatGPT 4o 產生幾張圖&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/programming/openai/try-create-image.png&quot; alt=&quot;ChatGPT 4o 產生的圖&quot; /&gt;&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="programming" /><category term="ChatGPT" /><category term="OpenAI" /><summary type="html">如果你有交 ChatGPT 月費，去看看 ChatGPT 的網頁界面，如果你看到下載按鈕，恭喜你，你可以下載 macOS 應用程式了。</summary></entry><entry><title type="html">WWDC24 準備開始了，將在台北時間 6 月 11 日至 6 月 15 日舉行</title><link href="http://localhost:4000/swift/wwdc24-post.html" rel="alternate" type="text/html" title="WWDC24 準備開始了，將在台北時間 6 月 11 日至 6 月 15 日舉行" /><published>2024-05-29T22:39:00+08:00</published><updated>2024-05-29T22:39:00+08:00</updated><id>http://localhost:4000/swift/wwdc24-post</id><content type="html" xml:base="http://localhost:4000/swift/wwdc24-post.html">&lt;h2 id=&quot;wwdc24-將在台北時間-2024-年-6-月-11-日至-6-月-15-日舉行&quot;&gt;WWDC24 將在台北時間 2024 年 6 月 11 日至 6 月 15 日舉行&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/swift/wwdc24/wwdcpaper.jpg&quot; alt=&quot;WWDC24 image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今天收到了 Apple 的廣告信，看到信才意識到現在又是一年一度的 WWDC 大會。今年的 WWDC24 將在台北時間 2024 年 6 月 11 日至 6 月 15 日舉行，雖然我最近 side project 的時間都在做和 Apple 裝置沒有關係的事情，但每一年的 WWDC 會前，心裡還是有種，對未來蘋果裝置的期待，也害怕受傷害。&lt;/p&gt;

&lt;p&gt;從肘子的電子報，我讀到這一篇 - &lt;a href=&quot;https://www.david-smith.org/blog/2024/05/15/craftsmanship-and-consideration/?issue=031&amp;amp;utm_source=FatbobmanWeekly&amp;amp;utm_medium=email&amp;amp;utm_campaign=FatbobmanWeekly031&quot;&gt;Craftsmanship &amp;amp; Consideration (工藝與考量)&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;最近自己比較沒像疫情前那樣，花比較多的時間在社群上，這篇文章提到的「社區價值觀」，希望台灣的開發者社群，可以在後 ChatGPT 時代，有更多的討論和交流。&lt;/p&gt;

&lt;hr /&gt;</content><author><name>Marvin Lin</name></author><category term="swift" /><category term="Swift" /><category term="WWDC" /><category term="iOS" /><category term="Apple" /><summary type="html">WWDC24 將在台北時間 2024 年 6 月 11 日至 6 月 15 日舉行</summary></entry><entry><title type="html">使用 ChatGPT-4o 重新翻譯 Linear 執行長在 Stripe 上分享關於程式回質的觀點</title><link href="http://localhost:4000/programming/chat-gpt4o-trans-linear.html" rel="alternate" type="text/html" title="使用 ChatGPT-4o 重新翻譯 Linear 執行長在 Stripe 上分享關於程式回質的觀點" /><published>2024-05-17T08:57:00+08:00</published><updated>2024-05-17T08:57:00+08:00</updated><id>http://localhost:4000/programming/chat-gpt4o-trans-linear</id><content type="html" xml:base="http://localhost:4000/programming/chat-gpt4o-trans-linear.html">&lt;h2 id=&quot;chatgpt-4o-已發佈使用-chatgpt-4o-重新翻譯-linear-執行長在-stripe-上分享關於程式回質的觀點&quot;&gt;ChatGPT-4o 已發佈，使用 ChatGPT-4o 重新翻譯 Linear 執行長在 Stripe 上分享關於程式回質的觀點&lt;/h2&gt;

&lt;h3 id=&quot;chatgpt-4o-demo&quot;&gt;ChatGPT-4o demo&lt;/h3&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/DQacCB9tDaw?si=W--6apbOvVjGG8GB&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;OpenAI 發佈了 ChatGPT-4o，在 live demo 以及 Youtube 上進行了一系列的火力展示。這一篇會將之前發表的文章，使用 ChatGPT-4o 重新翻譯。要注意的是，即使是 ChatGPT 4，也可能在一段時間之後，進行模型的更換，讓翻譯後的文案和第一次翻譯的狀況不同，所以並不能直接比較結果，就直接斷定某個版本比較好。這是使用 ChatGPT 要注意的地方。&lt;/p&gt;

&lt;h3 id=&quot;chatgpt-4o-coding-assistant-demo&quot;&gt;ChatGPT-4o coding assistant demo&lt;/h3&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/mzdvw_euKlk?si=2dXU3S-hjsmg-gMM&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;用-chatgpt-4o-學西班牙文&quot;&gt;用 ChatGPT-4o 學西班牙文&lt;/h3&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/eurVrO2iFz0?si=11RrEF0xs84zfDh1&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;用-chatgpt-4o-進行面試準備&quot;&gt;用 ChatGPT-4o 進行面試準備&lt;/h3&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/wfAYBdaGVxs?si=DBbfOBqKP6rFew_Q&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;工藝與品質以及專業級軟體&quot;&gt;工藝與品質，以及專業級軟體。&lt;/h2&gt;

&lt;p&gt;對我來說，工藝是一種心態，而品質是結果。&lt;/p&gt;

&lt;p&gt;如果你想到任何建造或創造的東西，而且做得很好，那可能是因為他們在意並且精通他們的工藝。他們設計得很好。他們反覆迭代和製作原型。他們選擇了合適的材料。他們製作得很好。很容易看出一個人是否不在意。工作就會顯得草率。會有錯誤。它可能能工作，但很快就會出問題。&lt;/p&gt;

&lt;p&gt;而且我認為在過去的十年中，軟體行業有點忘記了工藝。更多的東西看起來像是人們不在乎工藝的結果。我們專注於建立更大的團隊。然後讓他們像工廠一樣以穩定的速度生產新事物。我們通過 A/B 測試和查看指標來驗證“品質”。今天很多軟體勉強能工作。&lt;/p&gt;

&lt;p&gt;但我們應該是專業人士和真正的公司。我們在向人們銷售產品。我認為我們的責任是提供優質的產品，而不是草率的東西。&lt;/p&gt;

&lt;p&gt;工藝是創造品質的心態。但這還不夠。你需要擁有正確的技能和想法。你需要那些認真對待自己的職業和工藝的人，然後建立能夠一起這樣工作的團隊，並擁有一個能夠為此創造的公司。不僅僅是通過截止日期和指標來激勵，而且還關心體驗是否足夠好。&lt;/p&gt;

&lt;p&gt;特別是專業軟體應該是“專業級”的。專業級的工具和設備通常更耐用、更強大、更精確和專注。專業級的軟體也應該如此。它應該或多或少是無錯誤的。它應該很快。它應該滿足客戶的需求。&lt;/p&gt;

&lt;p&gt;反對意見總是“那麼你如何衡量品質”。這不是一個簡單的答案或單一的測量，這會很難，但這是可能的。你首先必須相信它，然後鼓勵團隊去做，你驗證的方法是聽市場和客戶的反饋。根據業務的不同，可能會有一些測量。&lt;/p&gt;

&lt;p&gt;對我們 @linear 來說，一直以來都是軼事。Linear 每天在公司中使用，我們聽到了很多反饋。他們發來筆記說產品或新功能有多好。人們在推特上談論它。CEO/創始人有時告訴我，他們選擇 Linear 是因為產品體驗非常好，他們用它來激勵自己的團隊做得一樣好。風投告訴我他們的投資組合公司如何熱烈讚美 Linear 並在談話中提到它。&lt;/p&gt;

&lt;p&gt;當你聽到這些信號時，你開始看到品質是否存在。但即使當你聽到這些信號時，你也不能停下來。偉大的產品需要持續的、每天的努力來保持品質。簡而言之，如果人們不自然地談論你的產品，你可能還沒有一個偉大的產品。也許你只是有一個普通的產品。如果你有一個偉大的產品，人們會談論它。&lt;/p&gt;

&lt;p&gt;偉大的產品會創造粉絲和擁護者。在我看來，產品質量是最終的護城河。&lt;/p&gt;

&lt;h2 id=&quot;chatgpt-4-與-chatgpt-4o比較&quot;&gt;ChatGPT-4, 與 ChatGPT-4o比較&lt;/h2&gt;
&lt;p&gt;這兩個版本，我比較喜歡 4o 的版本。&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://x.com/karrisaarinen/status/1783976321854717985&quot;&gt;Karri Saarinen 原文發表在 X (Twitter) 上&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.marvinswift.com/programming/linear.html&quot;&gt;使用 ChatGPT4 翻譯的版本&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Marvin Lin</name></author><category term="programming" /><category term="programming" /><category term="ChatGPT" /><category term="OpenAI" /><category term="linear" /><summary type="html">ChatGPT-4o 已發佈，使用 ChatGPT-4o 重新翻譯 Linear 執行長在 Stripe 上分享關於程式回質的觀點</summary></entry><entry><title type="html">Linear 執行長在 Stripe 上分享關於程式回質的觀點 - 機翻</title><link href="http://localhost:4000/programming/linear.html" rel="alternate" type="text/html" title="Linear 執行長在 Stripe 上分享關於程式回質的觀點 - 機翻" /><published>2024-05-13T00:12:00+08:00</published><updated>2024-05-13T00:12:00+08:00</updated><id>http://localhost:4000/programming/linear</id><content type="html" xml:base="http://localhost:4000/programming/linear.html">&lt;h2 id=&quot;緣由-linear-執行長-karri-saarinen-在-stripe-上分享了關於程式回質的觀點&quot;&gt;緣由: Linear 執行長 Karri Saarinen 在 Stripe 上分享了關於程式回質的觀點&lt;/h2&gt;

&lt;p&gt;在電子報 &lt;a href=&quot;https://explainthis.substack.com/p/explainthis-27&quot;&gt;全端雙週報 Explain This 27期&lt;/a&gt;中，有提到 Linear 執行長 Karri Saarinen 在 Stripe 上分享了關於程式回質的觀點，看完後，使用 ChatGPT 翻譯成中文，並且分享給大家。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://x.com/karrisaarinen/status/1783976321854717985&quot;&gt;Karri Saarinen 原文發表在 X (Twitter) 上&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;karri-的原文&quot;&gt;Karri 的原文&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/programming/craft-and-quality/post-on-x.jpeg&quot; alt=&quot;post on tweets&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Craft and Quality, and professional grade software.&lt;/p&gt;

&lt;p&gt;To me craft is mindset, and quality is the output.&lt;/p&gt;

&lt;p&gt;If you think of anything that was built or created, and well done, it’s probably because they cared
and they knew their craft. They designed it well. They iterated and prototyped. They chose the
right materials. They built it well. It’s very easy to see when the person doesn’t care. The work is&lt;/p&gt;

&lt;p&gt;sloppy. There are mistakes. It works and likely breaks down very quickly.&lt;/p&gt;

&lt;p&gt;And | think as a software industry the past decade we kind of forgot the craft. More stuff look
like something where people didn’t care about the craft. We focused on building larger teams.
We then made them run like factories churning out new things at a consistent pace. We validated&lt;/p&gt;

&lt;p&gt;“quality” by A/B testing and looking at metrics. Lot of software today borderline works.&lt;/p&gt;

&lt;p&gt;But we are supposed to be professionals and real companies. We’re selling products to people
to buy. | think our responsibility is to deliver good products and quality products, not something&lt;/p&gt;

&lt;p&gt;that is sloppy.&lt;/p&gt;

&lt;p&gt;Craft is the mindset that creates quality. But it’s not enough. You need to have the right skills and
ideas. You need individuals who take their profession and craft seriously, then build teams that
work this way together, and have a company that creates for it. Not only incentivizing with&lt;/p&gt;

&lt;p&gt;deadlines and metrics, but also caring if the experience is good enough.&lt;/p&gt;

&lt;p&gt;Especially professional software should be “professional grade”. Professional grade tools and
appliances are often more durable, more powerful, more precise and focused. Professional grade
software should be that way too. It should be more or less bug free. It should be fast. It should
meet the needs of the customers.&lt;/p&gt;

&lt;p&gt;The pushback is always “well how do you measure quality”. There isn’t an easy answer or a single
measurement, it’s going to be hard, but it is possible. You first have to believe in it, then
encourage teams to do it, and the way you validate is by listening to what the market and&lt;/p&gt;

&lt;p&gt;customers say. Depending on the business there can be measurements.&lt;/p&gt;

&lt;p&gt;For us @linear it’s always been anecdotal. Linear is used daily in the companies and we hear a lot
of feedback. They send notes how great the product or a new feature is. People tweet about it.
CEO/founders sometimes tell me that they picked Linear because the product experience is so
good that they use it to inspire their teams to do the same. VCs tell me how their portfolio&lt;/p&gt;

&lt;p&gt;companies rave about Linear and bring it up in the conversations.&lt;/p&gt;

&lt;p&gt;As you listen to these signals, you start to see if the quality is there or not. But even when you
hear the signals, you can’t stop. Great products require consistent, daily effort keeping the&lt;/p&gt;

&lt;p&gt;quality.
In short, people aren’t organically raving about your product, you probably don’t have a great
product yet. Maybe you have just an OK product. If you have a great product, people will talk&lt;/p&gt;

&lt;p&gt;about it.&lt;/p&gt;

&lt;p&gt;Great products create fans and champions. In my mind product quality is the ultimate moat.&lt;/p&gt;

&lt;h2 id=&quot;機翻中文&quot;&gt;機翻中文&lt;/h2&gt;

&lt;p&gt;手藝與品質，以及專業級軟體。&lt;/p&gt;

&lt;p&gt;對我來說，手藝是一種心態，品質是其產出。&lt;/p&gt;

&lt;p&gt;如果你想到任何被建造或創造出來且做得很好的事物，那很可能是因為他們在乎他們的手藝。他們設計得很好。他們進行反覆的迭代和原型製作。他們選擇了合適的材料。他們建造得很好。當一個人不在乎時，這是非常容易看出的。工作做得馬虎，有錯誤。它能運作但很可能很快就會故障。&lt;/p&gt;

&lt;p&gt;我認為，在過去十年的軟體產業中，我們有點忘記了手藝。更多的產品看起來像是人們不在乎手藝的產物。我們專注於擴建更大的團隊。然後讓他們像工廠一樣持續不斷地生產新事物。我們通過A/B測試和看指標來驗證「品質」。今天很多軟體僅僅是勉強能用。&lt;/p&gt;

&lt;p&gt;但我們應該是專業人士和真正的公司。我們銷售的是讓人們購買的產品。我認為我們的責任是提供好的產品和高品質的產品，而不是那些做工粗糙的產品。&lt;/p&gt;

&lt;p&gt;手藝是創造品質的心態。但這還不夠。你需要擁有正確的技能和想法。你需要那些認真對待自己的職業和手藝的人，然後建立這樣合作的團隊，並擁有一個為此創造的公司。不僅僅是用期限和指標作為激勵，還要關心體驗是否足夠好。&lt;/p&gt;

&lt;p&gt;尤其是專業軟體應該是「專業級」的。專業級工具和設備通常更耐用、更強大、更精確且更專注。專業級軟體也應該如此。它應該基本無錯、運行快速、能滿足客戶的需求。&lt;/p&gt;

&lt;p&gt;對於品質的反饋總是「你如何衡量品質」。沒有簡單的答案或單一的衡量方式，這將是困難的，但這是可能的。你首先必須相信它，然後鼓勵團隊去做，而你驗證的方式是聽取市場和客戶的說法。根據業務的不同，可以有相應的衡量標準。&lt;/p&gt;

&lt;p&gt;對我們 @linear 來說，它總是一種軼事。Linear 在公司中每天都被使用，我們收到很多反饋。他們發送說明產品或新功能有多好的筆記。人們在推特上談論它。首席執行官/創始人有時告訴我，他們之所以選擇 Linear，是因為產品體驗非常好，他們用它來激勵他們的團隊做同樣的事情。風險投資者告訴我，他們的投資組合公司如何熱衷於 Linear 並在談話中提起它。&lt;/p&gt;

&lt;p&gt;當你聽到這些信號時，你開始看到品質是否存在。但即使你聽到了這些信號，你也不能停止。優秀的產品需要持續的、日常的努力來維持品質。&lt;/p&gt;

&lt;p&gt;總之，如果人們不是自然地狂熱於你的產品，你可能還沒有一個偉大的產品。也許你只有一個還可以的產品。如果你有一個偉大的產品，人們會談論它。&lt;/p&gt;

&lt;p&gt;偉大的產品創造粉絲和冠軍。在我看來，產品品質是最終的護城河。&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="programming" /><category term="Linear" /><category term="Programming" /><summary type="html">緣由: Linear 執行長 Karri Saarinen 在 Stripe 上分享了關於程式回質的觀點</summary></entry><entry><title type="html">Swift 5.10 Released</title><link href="http://localhost:4000/swift/swift_5_10_released.html" rel="alternate" type="text/html" title="Swift 5.10 Released" /><published>2024-03-06T11:54:00+08:00</published><updated>2024-03-06T11:54:00+08:00</updated><id>http://localhost:4000/swift/swift_5_10_released</id><content type="html" xml:base="http://localhost:4000/swift/swift_5_10_released.html">&lt;h2 id=&quot;swift-510-released---下一個版本就是-swift-6&quot;&gt;Swift 5.10 Released - 下一個版本就是 Swift 6&lt;/h2&gt;

&lt;p&gt;以下文章內容，來自 Swift.org 的 &lt;a href=&quot;https://www.swift.org/blog/swift-5.10-released/&quot;&gt;Swift 5.10 Released&lt;/a&gt;，由 Holly Borla 撰寫。&lt;/p&gt;

&lt;p&gt;Holly BorlaHolly Borla
Holly Borla 是 Apple Swift 團隊的一名工程師，同時也是 Swift 核心團隊、語言指導小組和 Swift 多元化工作組的成員。
Swift 被設計為默認安全，能在編譯時防止整個類別的編程錯誤。在基於 C 的語言中未定義行為的來源，如在初始化之前使用變量或使用後釋放，都在 Swift 中被定義掉了。&lt;/p&gt;

&lt;p&gt;一個越來越重要的未定義行為來源是並行代碼不經意地從一個線程訪問內存，而另一個線程同時寫入同一內存。這種不安全被稱為資料競爭，資料競爭使得編寫正確的並行程序變得異常困難。Swift 通過提供由演員和任務提供的數據隔離來解決這個問題，這保證了對共享可變狀態的互斥訪問。數據隔離執行自2020年Swift並行性路線圖發布以來一直在積極開發中。&lt;/p&gt;

&lt;p&gt;Swift 5.10 在並發語言模型中實現了完全的數據隔離。這一重要的里程碑歷經多次發布的多年積極開發。並行模型於 Swift 5.5 引入，包括 async/await、演員和結構化並行。Swift 5.7 引入了 Sendable 作為基本概念，用於線程安全類型，其值可以在任意並行上下文中共享而不引入數據競爭的風險。現在，在 Swift 5.10 中，當啟用完整的並發檢查選項時，將在語言的所有領域強制實施完全數據隔離。&lt;/p&gt;

&lt;p&gt;Swift 5.10 中的完全數據隔離為下一個主要發布版本，Swift 6，奠定了基礎。Swift 6.0 編譯器將提供一種新的，可選的 Swift 6 語言模式，默認強制完全數據隔離，我們將開始過渡以消除所有用 Swift 編寫的軟件中的數據競爭。&lt;/p&gt;

&lt;p&gt;在某些情況下，Swift 5.10 將在代碼可以通過額外的編譯器分析證明為安全的情況下產生數據競爭警告。Swift 6 發布的語言開發的一個主要焦點是通過減輕在常見代碼模式中被證明為安全的虛假正面並發錯誤來改善嚴格並發檢查的可用性。&lt;/p&gt;

&lt;p&gt;閱讀下去以了解 Swift 5.10 中的完全數據隔離，演員隔離檢查的新的不安全選擇，以及 Swift 6 之前剩餘的並發進化。&lt;/p&gt;

&lt;p&gt;Swift 5.10 中的數據競爭安全
完全數據隔離
Swift 5.10 在語言的所有角落完善了數據競爭安全語義，並修復了 Sendable 和演員隔離檢查中的許多錯誤，以加強完整並發檢查的保證。當使用編譯器標誌 -strict-concurrency=complete 構建代碼時，Swift 5.10 將除非使用顯式不安全選擇，如 nonisolated(unsafe) 或 @unchecked Sendable，否則將在編譯時診斷出數據競爭的潛在性。&lt;/p&gt;

&lt;p&gt;例如，在 Swift 5.9 中，以下代碼由於在演員之外評估了一個 @MainActor-隔離的初始化器而在運行時失敗了一個隔離斷言，但在 -strict-concurrency=complete 下沒有被診斷：&lt;/p&gt;

&lt;p&gt;@MainActor
class MyModel {
private init() {
MainActor.assertIsolated()
}&lt;/p&gt;

&lt;p&gt;static let shared = MyModel()
}&lt;/p&gt;

&lt;p&gt;func useShared() async {
let model = MyModel.shared
}&lt;/p&gt;

&lt;p&gt;await useShared()
上述代碼允許數據競爭。MyModel.shared 是一個 @MainActor-隔離的靜態變量，它在首次訪問時評估一個 @MainActor-隔離的初始值。MyModel.shared 從 useShared() 函數內的一個非隔離上下文同步訪問，因此初始值在主演員外計算。在 Swift 5.10 中，使用 -strict-concurrency=complete 編譯代碼會產生一個警告，即訪問必須異步進行：&lt;/p&gt;

&lt;p&gt;警告：表達式是 ‘async’ 的，但沒有標記為 ‘await’
let model = MyModel.shared
^~~~~~~~~~~~~~
await
解決數據競爭的可能修復是 1) 使用 await 異步訪問 MyModel.shared，2) 使 MyModel.init 和 MyModel.shared 都是 nonisolated 並將需要主演員的代碼移到一個單獨的隔離方法中，或 3) 將 useShared() 隔離到 @MainActor。&lt;/p&gt;

&lt;p&gt;您可以在 Swift 5.10 發布說明中找到更多關於完全數據隔離編程模型的變化和添加的詳細信息。&lt;/p&gt;

&lt;p&gt;不安全選擇
像 @unchecked Sendable 一樣的不安全選擇對於當編譯器無法自動證明代碼免於數據競爭時表明代碼安全非常重要。在編譯器無法理解的同步方式實現的情況下，例如通過操作系統特定的原語或與 C/C++/Objective-C 中實現的線程安全類型工作時，這些工具是必需的。然而，@unchecked Sendable 一致性難以正確使用，因為它們使整個類型選擇退出數據競爭安全檢查。在許多情況下，只有類型中的一個特定屬性需要選擇退出，而其餘的實現遵循靜態並發安全。&lt;/p&gt;

&lt;p&gt;Swift 5.10 引入了一個新的 nonisolated(unsafe) 關鍵字，用於退出存儲屬性和變量的演員隔離檢查。nonisolated(unsafe) 可以用於任何形式的存儲，包括存儲屬性、局部變量和全局/靜態變量。&lt;/p&gt;

&lt;p&gt;例如，全局和靜態變量可以從代碼的任何地方訪問，因此它們要麼是不可變且 Sendable 的，要麼是隔離到一個全局演員的：&lt;/p&gt;

&lt;p&gt;import Dispatch&lt;/p&gt;

&lt;p&gt;struct MyData {
static let cacheQueue = DispatchQueue(…)
// 所有對 ‘globalCache’ 的訪問都由 ‘cacheQueue’ 保護
static var globalCache: [MyData] = []
}
當使用 -strict-concurrency=complete 構建上述代碼時，編譯器發出警告：&lt;/p&gt;

&lt;p&gt;警告：靜態屬性 ‘globalCache’ 不是並發安全的，因為它是非隔離的全局共享可變狀態
static var globalCache: [MyData] = []&lt;/p&gt;
&lt;p&gt;注意：將 ‘globalCache’ 隔離到一個全球演員，或將其轉換為 ‘let’ 常量並使其符合 ‘Sendable’
所有對 globalCache 的使用都由 cacheQueue.async { … } 保護，因此這段代碼在實踐中免於數據競爭。在這種情況下，可以將 nonisolated(unsafe) 應用於靜態變量以消除並發警告：&lt;/p&gt;

&lt;p&gt;import Dispatch&lt;/p&gt;

&lt;p&gt;struct MyData {
static let cacheQueue = DispatchQueue(…)
// 所有對 ‘globalCache’ 的訪問都由 ‘cacheQueue’ 保護
nonisolated(unsafe) static var globalCache: [MyData] = []
}
nonisolated(unsafe) 還消除了使用 @unchecked Sendable 包裝類型的需求，這些包裝類型僅用於在沒有並發訪問可能性時將特定非 Sendable 值的實例跨隔離邊界傳遞：&lt;/p&gt;

&lt;p&gt;// ‘MutableData’ 不是 ‘Sendable’
class MutableData { … }&lt;/p&gt;

&lt;p&gt;func processData(_: MutableData) async { … }&lt;/p&gt;

&lt;p&gt;@MainActor func send() async {
nonisolated(unsafe) let data = MutableData()
await processData(data)
}
請注意，如果沒有正確實現同步機制以實現數據隔離，從獨占性強制或如 Thread Sanitizer 這樣的工具的動態分析可能仍然識別出失敗。&lt;/p&gt;

&lt;p&gt;Swift 6 之前的語言進化
下一次 Swift 發布將是 Swift 6。Swift 5.10 中的完整並行模型過於嚴格，幾個 Swift Evolution 提案正在積極開發中，以通過移除虛假的數據競爭錯誤來改善完全數據隔離的可用性。這項工作包括當編譯器確定沒有並發訪問的潛在性時，解除在隔離邊界之間傳遞 non-Sendable 值的限制，為函數和關鍵路徑更有效地推斷 Sendable，等等。您可以在 Swift.org/swift-evolution 上找到將完善 Swift 6 的一套提案。&lt;/p&gt;

&lt;p&gt;下一步
嘗試完整的並發檢查
您可以通過在您的項目中嘗試完整的並發檢查並提供您的體驗反饋來幫助塑造過渡到 Swift 6 語言模式。&lt;/p&gt;

&lt;p&gt;如果您發現任何剩餘的編譯器錯誤，其中完整的並發檢查未在編譯時診斷出數據競爭，請報告一個問題。&lt;/p&gt;

&lt;p&gt;您還可以提供反饋以幫助改進並發文檔、編譯器錯誤消息和即將到來的 Swift 6 遷移指南。如果您遇到編譯器診斷出您不理解的數據競爭警告，或者您不確定如何解決給定的數據競爭警告，請在 Swift 論壇上使用並發標籤開始討論帖。&lt;/p&gt;

&lt;p&gt;下載
官方的 Swift 5.10 二進制文件可從 Swift.org 為 macOS、Windows 和 Linux 下載。&lt;/p&gt;

&lt;p&gt;Swift Evolution 附錄
以下語言提案通過 Swift Evolution 過程被接受並在 Swift 5.10 中實現：&lt;/p&gt;

&lt;p&gt;SE-0327：關於演員和初始化
SE-0383：廢除 @UIApplicationMain 和 @NSApplicationMain
SE-0404：允許在非泛型上下文中嵌套協議
SE-0411：隔離的默認值表達式
SE-0412：全局變量的嚴格並發&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="swift" /><category term="Swift" /><category term="iOS" /><category term="Swift 5.10" /><summary type="html">Swift 5.10 Released - 下一個版本就是 Swift 6</summary></entry><entry><title type="html">Google 的 Gemini AI Demo 影片是經過編輯的，不是真實</title><link href="http://localhost:4000/programming/gemini-video-is-fake.html" rel="alternate" type="text/html" title="Google 的 Gemini AI Demo 影片是經過編輯的，不是真實" /><published>2023-12-10T21:48:00+08:00</published><updated>2023-12-10T21:48:00+08:00</updated><id>http://localhost:4000/programming/gemini-video-is-fake</id><content type="html" xml:base="http://localhost:4000/programming/gemini-video-is-fake.html">&lt;p&gt;上一篇講了 Google 發佈了 Gemini demo video: &lt;a href=&quot;https://www.marvinswift.com/programming/google-release-gemini-ai-to-compete-ChatGPT.html&quot;&gt;Google 推出 Gemini，從 Pichai 的 X(前身為 Twitter) 中，可以看出驚人的進步&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;google-gemini-的-demo-video-並不是真實的狀態是經過編輯的&quot;&gt;Google Gemini 的 Demo video 並不是真實的狀態，是經過編輯的&lt;/h2&gt;

&lt;p&gt;這個週末，一堆文章已經說明了 Google Gemini 的 Demo video 並不是真實的狀態，是經過編輯的。&lt;/p&gt;

&lt;h2 id=&quot;各大網站對於-gemini-影片是經過編輯的報導&quot;&gt;各大網站對於 Gemini 影片是經過編輯的報導&lt;/h2&gt;
&lt;h3 id=&quot;inside-google-坦承gemini-影片經過編輯不是口頭提示&quot;&gt;Inside: Google 坦承：Gemini 影片「經過編輯」，不是口頭提示&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.inside.com.tw/article/33558-google-gemini-not-real&quot;&gt;Google 坦承：Gemini 影片「經過編輯」，不是口頭提示&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;tech-news-gemini-示範影片造假google-deepmind-澄清影片都是真的&quot;&gt;Tech News: Gemini 示範影片造假？Google DeepMind 澄清：影片都是真的&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://technews.tw/2023/12/08/google-gemini-demo/&quot;&gt;Gemini 示範影片造假？Google DeepMind 澄清：影片都是真的&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;tech-crunch-googles-best-gemini-demo-was-faked&quot;&gt;Tech Crunch: Google’s best Gemini demo was faked&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://techcrunch.com/2023/12/07/googles-best-gemini-demo-was-faked/&quot;&gt;Google’s best Gemini demo was faked&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;indian-express-google-gemini-is-no-match-for-gpt-4-fake-demo-video-shaky-mmlu-benchmark-draw-backlash&quot;&gt;Indian Express: Google Gemini is no match for GPT-4: Fake demo video, shaky MMLU benchmark draw backlash&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://indianexpress.com/article/technology/artificial-intelligence/google-gemini-fake-video-gpt4-mmlu-benchmark-9061082/&quot;&gt;Google Gemini is no match for GPT-4: Fake demo video, shaky MMLU benchmark draw backlash&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;結論&quot;&gt;結論&lt;/h2&gt;

&lt;p&gt;Google Gemini 的 Demo video 並不是真實的狀態，是經過編輯的。但社群看起來，並不滿意 Google 的做法，很多英文的文章都使用了「Fake」這個字來形容了。&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="programming" /><category term="Google Gemini" /><category term="ChatGPT" /><category term="AI" /><category term="LLM" /><summary type="html">上一篇講了 Google 發佈了 Gemini demo video: Google 推出 Gemini，從 Pichai 的 X(前身為 Twitter) 中，可以看出驚人的進步</summary></entry><entry><title type="html">Google 推出 Gemini，從 Pichai 的 X(前身為 Twitter) 中，可以看出驚人的進步</title><link href="http://localhost:4000/programming/google-release-gemini-ai-to-compete-ChatGPT.html" rel="alternate" type="text/html" title="Google 推出 Gemini，從 Pichai 的 X(前身為 Twitter) 中，可以看出驚人的進步" /><published>2023-12-07T22:06:00+08:00</published><updated>2023-12-07T22:06:00+08:00</updated><id>http://localhost:4000/programming/google-release-gemini-ai-to-compete-ChatGPT</id><content type="html" xml:base="http://localhost:4000/programming/google-release-gemini-ai-to-compete-ChatGPT.html">&lt;h2 id=&quot;20231210-更新-google-的-gemini-ai-demo-影片是經過編輯的不是真實&quot;&gt;2023/12/10 更新: Google 的 Gemini AI Demo 影片是經過編輯的，不是真實&lt;/h2&gt;

&lt;h3 id=&quot;在經過數天之後已經有很多文章說明了-google-gemini-的-demo-video-並不是真實的狀態是經過編輯的&quot;&gt;在經過數天之後，已經有很多文章說明了 Google Gemini 的 Demo video 並不是真實的狀態，是經過編輯的&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.marvinswift.com/programming/gemini-video-is-fake.html&quot;&gt;Google 的 Gemini AI Demo 影片是經過編輯的，不是真實&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2023 真的是讓人感受到 AI 軍備競賽的一年，OpenAI 推出了 ChatGPT，Google 推出了 Gemini，Facebook 推出了 Blender，而 Gemini 的能力，從 Pichai 在 X (前身為 Twitter) 上的推文中，可以看出驚人的進步。&lt;/p&gt;

&lt;h2 id=&quot;sundar-pichai-在-x-前身為-twitter上的推文&quot;&gt;Sundar Pichai 在 X (前身為 Twitter)上的推文&lt;/h2&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Seeing some qs on what Gemini *is* (beyond the zodiac :). Best way to understand Gemini’s underlying amazing capabilities is to see them in action, take a look ⬇️ &lt;a href=&quot;https://t.co/OiCZSsOnCc&quot;&gt;pic.twitter.com/OiCZSsOnCc&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sundar Pichai (@sundarpichai) &lt;a href=&quot;https://twitter.com/sundarpichai/status/1732433036929589301?ref_src=twsrc%5Etfw&quot;&gt;December 6, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;多模態的-gemini&quot;&gt;多模態的 Gemini&lt;/h2&gt;

&lt;p&gt;從上面這段影片中，可以看到 Gemini 在辨視紙上的圖案的過程。&lt;/p&gt;

&lt;h3 id=&quot;第-1-part&quot;&gt;第 1 part&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;開始是白紙&lt;/li&gt;
  &lt;li&gt;然後看到各種圓滑的曲線&lt;/li&gt;
  &lt;li&gt;然後看出是在畫鴨子&lt;/li&gt;
  &lt;li&gt;當鴨子被塗上藍色後，能辨認出顏色，而且說出「這並不常見」&lt;/li&gt;
  &lt;li&gt;然後拍攝者就拿了一個藍色的玩具鴨子出來，就改口說，原來常見，看來我之前是錯的&lt;/li&gt;
  &lt;li&gt;Gemini 推測出鴨子的材料&lt;/li&gt;
  &lt;li&gt;拍攝者請 Gemini 說出其他語音鴨子的念法，並選了中文&lt;/li&gt;
  &lt;li&gt;Gemini 補充了中文的四聲音調&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;第-2-part&quot;&gt;第 2 part&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;放上地圖，請 Gemini 設計一個遊戲&lt;/li&gt;
  &lt;li&gt;Gemini 設計出，給三個提示，請拍攝者指出該國家&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;第-3-part&quot;&gt;第 3 part&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;將地圖揉成一團，放入其中一個杯子下，桌上共有三個杯子。 Gemini 猜出拍攝者要玩猜目標。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;第-4-part&quot;&gt;第 4 part&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;這一 part 以手勢為主&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;剩下的部分，可以看完整部影片。或許 2024 的一整年，AI 會比我們想像中更快的速度，存在於我們的生活中。&lt;/p&gt;

&lt;h2 id=&quot;openai-的-chatgpt&quot;&gt;OpenAI 的 ChatGPT&lt;/h2&gt;

&lt;p&gt;在這篇文章發佈之前，還沒有看到 ChatGPT 或 Altman 有其他回應。而且這個禮拜，我一直想要升級 ChatGPT 4.0，但 OpenAI 升級的按鈕一直沒有開發，我也沒辦法升級。即使我已經寫信給 OpenAI，也只是得到了一個自動回信， noting!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/programming/chatgpt/chatGPT-can-not-upgrade-now.png&quot; alt=&quot;沒辦法升級 ChatGPT 4.0&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;youtube-影片&quot;&gt;Youtube 影片&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/UIZAiXYceBI?si=Pdl8qkVYBBz6uZ0O&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Marvin Lin</name></author><category term="programming" /><category term="Google Gemini" /><category term="ChatGPT" /><category term="AI" /><category term="LLM" /><summary type="html">2023/12/10 更新: Google 的 Gemini AI Demo 影片是經過編輯的，不是真實</summary></entry><entry><title type="html">在 iOS 專案加上測試-You need testing</title><link href="http://localhost:4000/swift/add-unit-testing-on-project.html" rel="alternate" type="text/html" title="在 iOS 專案加上測試-You need testing" /><published>2023-12-06T17:15:00+08:00</published><updated>2023-12-06T17:15:00+08:00</updated><id>http://localhost:4000/swift/add-unit-testing-on-project</id><content type="html" xml:base="http://localhost:4000/swift/add-unit-testing-on-project.html">&lt;blockquote&gt;
  &lt;p&gt;「寫程式就像蓋教堂- 當完成之後，
我們就開始祈禱。」&lt;/p&gt;

&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Software and cathedrals are much the same – first we build them, then we pray.Sam Redwine&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/unitTesting/add-test-target-on-xcode/you-need-testing.png&quot; alt=&quot;You need testing&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;在-ios-專案加上測試-you-need-testing&quot;&gt;在 iOS 專案加上測試 You need testing&lt;/h2&gt;

&lt;p&gt;你是不是覺得 Unit testing 很麻煩，很浪費時間，很沒必要？如果你這麼想，那你就錯了！Unit testing 對 iOS 專案的好處可不少。&lt;/p&gt;

&lt;p&gt;首先，Unit testing 可以幫你提高程式碼的品質和可讀性。你可以透過 Unit testing 來檢查你的程式邏輯是否正確，是否符合需求，是否有 bug 或錯誤。你也可以透過 Unit testing 來重構你的程式碼，讓它更簡潔，更清晰，更容易維護。你不用擔心重構後會影響到其他功能，因為你有 Unit testing 來保證你的程式還是能正常運作。&lt;/p&gt;

&lt;p&gt;其次，Unit testing 可以幫你節省時間和成本。你可能覺得寫 Unit testing 很花時間，但是你有沒有想過，如果你不寫 Unit testing，你可能會花更多時間在 debug 和修復 bug 上。而且，如果你的 bug 在上線後才被發現，那麼後果可能更嚴重，不僅會影響到用戶的體驗和信任，也會增加你的維護成本和風險。相比之下，如果你有 Unit testing，在開發階段就能及時發現和解決問題，那麼你就能提高你的開發效率和產品質量。&lt;/p&gt;

&lt;p&gt;最後，Unit testing 可以幫你提升自信和專業度。當你有 Unit testing 來支持你的程式碼時，你就能更有信心地面對需求的反饋和需求。你也能更有信心地與其他開發者合作和分享你的程式碼。而且，Unit testing 也是一種展示你的專業態度和技能的方式。當別人看到你的程式碼有完善的 Unit test 時，他們就會對你的水平和責任感有更高的評價。&lt;/p&gt;

&lt;p&gt;總之，Unit testing 對 iOS 專案的好處是多多益善的。如果你還沒有開始寫 Unit test，那就趕快行動吧！相信我，Unit test 會讓你的開發生活更美好！&lt;/p&gt;

&lt;h2 id=&quot;測試金字塔&quot;&gt;測試金字塔&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/unitTesting/add-test-target-on-xcode/ui-integrate-unit-testing.png&quot; alt=&quot;測試金字塔&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這是網路上常見的關於測試金字塔的圖案。它將不同類型的測試分為三層：單元測試、整合測試和 UI 測試。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;單元測試（Unit Test）：位於金字塔的底層，是最基本和最快速的測試類型，主要針對軟體的最小可測單元（如函數、方法或類別）進行驗證，確保代碼的邏輯正確性和健壯性。單元測試通常由開發人員自行編寫和執行，並使用各種工具和框架來自動化和簡化測試過程。單元測試應該佔據金字塔的最大比例，因為它們可以及時發現和修復代碼中的錯誤，提高代碼質量和可維護性。&lt;/li&gt;
  &lt;li&gt;整合測試（Integration Test）：位於金字塔的中層，是在單元測試之後進行的測試類型，主要針對軟體的不同模組或組件之間的交互和協作進行驗證，確保整合後的系統能夠正常運作。整合測試通常由開發人員或測試人員負責，並使用 Mock 或 Stub 等技術來隔離外部依賴和影響。整合測試應該佔據金字塔的中等比例，因為它們可以檢查系統的內部結構和邏輯是否符合設計規範和需求。&lt;/li&gt;
  &lt;li&gt;UI Test：位於金字塔的頂層，是最接近真實使用場景和用戶體驗的測試類型，主要針對軟體的完整功能和流程進行驗證，確保系統能夠按照預期提供服務。端對端測試通常由測試人員或用戶代表負責，並使用自動化或手動的方式來模擬用戶操作和行為。端對端測試應該佔據金字塔的最小比例，因為它們通常比較耗時和昂貴，且難以涵蓋所有可能的情況和變數。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;單元測試的-first-原則&quot;&gt;單元測試的 F.I.R.S.T 原則&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Fast：Unit test 應該快速執行，不要花費太多時間或資源。&lt;/li&gt;
  &lt;li&gt;Independent：Unit test 應該獨立於其他測試，不要互相影響或依賴。&lt;/li&gt;
  &lt;li&gt;Repeatable：Unit test 應該可以在任何環境或情況下重複執行，並得到一致的結果。&lt;/li&gt;
  &lt;li&gt;Self-validating：Unit test 應該有明確的通過或失敗的標準，不要需要人工檢查或驗證。&lt;/li&gt;
  &lt;li&gt;Timely：Unit test 應該及時編寫，最好在開發程式碼之前或同時進行，以驅動設計和重構。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;希望這一系列的文章，能讓你能體會 Unit Testing 的好處。Unit Testing是一項實用的技能，它具有廣泛的應用範疇，無論是應用程式的規模大小，都能受惠於它。持之以恆地精進這項技能，並積極將其運用於您的iOS專案中，是一個不斷學習和成長的過程。&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="unitTesting" /><category term="Unit Testing" /><category term="Swift" /><category term="Xcode" /><summary type="html">「寫程式就像蓋教堂- 當完成之後， 我們就開始祈禱。」</summary></entry><entry><title type="html">買了一個比特幣樂透礦機，算力 55kH/s 左右</title><link href="http://localhost:4000/life/btc-lottery-iner.html" rel="alternate" type="text/html" title="買了一個比特幣樂透礦機，算力 55kH/s 左右" /><published>2023-11-21T16:49:00+08:00</published><updated>2023-11-21T16:49:00+08:00</updated><id>http://localhost:4000/life/btc-lottery-iner</id><content type="html" xml:base="http://localhost:4000/life/btc-lottery-iner.html">&lt;p&gt;有一天心寫來潮，想試試看有沒有便宜比特幣的礦機，在蝦皮上一找，發現比特幣樂透礦機，剛好可以滿足我的需求。&lt;/p&gt;

&lt;p&gt;這種礦機大小比較像是一個 USB 隨身碟，但是比較厚，一插上去後，設定好 wifi 和錢包，就可以開始挖礦了。&lt;/p&gt;

&lt;p&gt;沒什麼噪音，也不會散熱，因為算力不高，所以也不會發燙，一個月的電費大概在 5 塊以內。&lt;/p&gt;

&lt;h2 id=&quot;產品實拍照&quot;&gt;產品實拍照&lt;/h2&gt;

&lt;h3 id=&quot;產品到貨圖-with-包裝盒&quot;&gt;產品到貨圖 with 包裝盒&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/life/btc-lottery-miner/image1.jpeg&quot; alt=&quot;產品到貨圖 with 包裝盒&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;頁面1---有-global-hash-rate-medium-fee-等資訊&quot;&gt;頁面1 - 有 Global hash rate, medium fee 等資訊&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/life/btc-lottery-miner/image2.jpeg&quot; alt=&quot;頁面1 - 有 Global hash rate, medium fee 等資訊&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;頁面2---時鐘功能平常放在桌子上也不會讓人覺得很奇怪&quot;&gt;頁面2 - 時鐘功能，平常放在桌子上，也不會讓人覺得很奇怪&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/life/btc-lottery-miner/image3.jpeg&quot; alt=&quot;頁面2 - 時鐘功能，平常放在桌子上，也不會讓人覺得很奇怪&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;頁面3---挖礦資訊也有算力資訊當-valid-blocks-出現-1就是挖到啦&quot;&gt;頁面3 - 挖礦資訊，也有算力資訊，當 Valid blocks 出現 1！就是挖到啦！&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/life/btc-lottery-miner/image4.jpeg&quot; alt=&quot;頁面3 - 挖礦資訊，也有算力資訊&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;購買連結&quot;&gt;購買連結&lt;/h2&gt;

&lt;h3 id=&quot;比特幣樂透礦機&quot;&gt;&lt;a href=&quot;https://shope.ee/2VRGeYrz0O&quot;&gt;比特幣樂透礦機&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://shope.ee/2VRGeYrz0O&quot;&gt;&lt;img src=&quot;/assets/life/btc-lottery-miner/shopee.png&quot; alt=&quot;蝦皮賣場照片&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="life" /><category term="比特幣" /><category term="樂透" /><category term="礦機" /><category term="bitcoin" /><category term="miner" /><category term="crypto currency" /><category term="satoshi" /><category term="shopee" /><category term="蝦皮" /><summary type="html">有一天心寫來潮，想試試看有沒有便宜比特幣的礦機，在蝦皮上一找，發現比特幣樂透礦機，剛好可以滿足我的需求。</summary></entry><entry><title type="html">UIRefresh 在 iOS 17 有破壞性更新，生命周期要移到 viewIsAppearing, from Essential Developer</title><link href="http://localhost:4000/swift/iOS17-refresh-control-breaking-change.html" rel="alternate" type="text/html" title="UIRefresh 在 iOS 17 有破壞性更新，生命周期要移到 viewIsAppearing, from Essential Developer" /><published>2023-11-18T19:14:00+08:00</published><updated>2023-11-18T19:14:00+08:00</updated><id>http://localhost:4000/swift/iOS17-refresh-control-breaking-change</id><content type="html" xml:base="http://localhost:4000/swift/iOS17-refresh-control-breaking-change.html">&lt;p&gt;今天早上(2023/11/18)，今天發生了幾件大事&lt;/p&gt;

&lt;h2 id=&quot;sam-altman-被-openai-解僱了幾小時後-greg-brockman-也提辭職了&quot;&gt;Sam Altman 被 OpenAI 解僱了，幾小時後 Greg Brockman 也提辭職了&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://edition.cnn.com/2023/11/17/tech/sam-altman-departs-open-ai/index.html&quot;&gt;解僱新聞 - CNN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.businessweekly.com.tw/international/blog/3013921&quot;&gt;商周 - Sam Altman遭OpenAI解僱，代表什麼？程世嘉：OpenAI遇到極大經營問題&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;嗯…因為寫文的當下，是週末，目前還不確定會對 OpenAI、ChatGPT 有什麼影響，但在新聞中，董事會解僱的理由是「Altman 沒有誠實的對董事會」，如果後續有新的報導或發展，請以最新的新聞為主。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;第二個跟-ios-相關的事uirefreshcontrol-在-ios17-設定的生命週期要改這是我從-essential-developer-發的-email-電子報上看到的&quot;&gt;第二個跟 iOS 相關的事，UIRefreshControl 在 iOS17 設定的生命週期要改，這是我從 Essential Developer 發的 email 電子報上看到的&lt;/h2&gt;

&lt;h3 id=&quot;essential-developer-的-youtube-連結&quot;&gt;Essential Developer 的 YouTube 連結&lt;/h3&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/n9ObNkPP5GY?si=q8WjL7qejsfAWVeB&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;p&gt;email 提到，UIRefreshControl 在 iOS 17 有破壞性更新，生命周期要移到 viewIsAppearing, from Essential Developer&lt;/p&gt;

&lt;p&gt;以下是 Essential Developer 在 Youtube 中 live 示範&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/swift/refresh-breaking-on-ios17/configUIRefreshControl.png&quot; alt=&quot;consoleGotWarning&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 iOS 17 以前，在 viewDidLoad() 將 UIRefreshControl 設定好，並執行 refresh() 是沒問題的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;但是在 iOS 17&lt;/strong&gt; 同樣的程式碼，並不會看到 UIRefreshControl 的 animation，而且 console 下方也會有 warning message&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/swift/refresh-breaking-on-ios17/consoleGotWarning.png&quot; alt=&quot;consoleGotWarning&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;改到-viewwillappear-或-viewdidappear-生命週期有用嗎&quot;&gt;改到 viewWillAppear(:) 或 viewDidAppear(:) 生命週期有用嗎？&lt;/h3&gt;

&lt;p&gt;答： 如果移到 viewWillAppear(:) 時機太早，UIRefreshControl 不會渲染。移到 viewDidAppear(:) 太晚，會需要拉動一下畫面才會看到 UIRefreshControl 的動畫。&lt;/p&gt;

&lt;h3 id=&quot;改到-viewisappearing-有用嗎&quot;&gt;改到 viewIsAppearing(:) 有用嗎？&lt;/h3&gt;

&lt;p&gt;答： 有用。但請注意 viewIsAppearing(:) 需在 iOS 13 以上。&lt;/p&gt;

&lt;p&gt;Essential Developer 是品質很好的 iOS 開發資源，有興趣的朋友，歡迎給 Essential Developer 支持。不僅僅是買課程，按讚/留言/分享 都是某種形式的支持&lt;/p&gt;

&lt;h3 id=&quot;雖然只要看完前半段就可以知道解決這個問題的方法但真心推薦將這隻影片看到最後&quot;&gt;雖然只要看完前半段，就可以知道解決這個問題的方法，但真心推薦將這隻影片看到最後。&lt;/h3&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/n9ObNkPP5GY?si=Fhhgpy6pvVsvSx91&amp;amp;start=398&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;從這個時間點開始，Caio 和 Mike 不斷的優化程式碼，即使現在的程式碼已經在 production 上正常運作了。而修改的起點是 “Unit Testing”。這邊只節錄步驟，因為真的有料的東西都在影片裡面一段一段發生。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sut 的 vc 沒有真的在 window hiearchy 上，所以創了一個 Window 讓 vc 可以掛上去&lt;/li&gt;
  &lt;li&gt;但掛上去到渲染又需要「一點」時間，所以用了個 delay 1 秒&lt;/li&gt;
  &lt;li&gt;delay 1 秒在 Unit Testing 是很不好的事情，如果你測試愈寫愈多，就會愈來愈慢，而且測試通常只可以接受 0.01 秒的等級。這已經不是把 1 秒調到 0.3 或更低的差別，而是這個 delay 在 unit testing 中不應該存在&lt;/li&gt;
  &lt;li&gt;為了不動到在產品中的 UIRefreshControl，寫了個 FakeRefreshControl 加上內部參數，可以在測試的時候拿來進行 assert&lt;/li&gt;
  &lt;li&gt;接下來「只」在 Unit Testing 中擴充一個抽換 UIRefreshControl 的方法，這在測試 target 進行 private 宣告，所以正式的環境不會有&lt;/li&gt;
  &lt;li&gt;接下來解決 viewIsAppearing(:) 有可能被第二次呼叫的狀況。在 Unit testing 中「強迫」讓 sut vc 進行第二次渲染，然後 Unit testing 就會 fail&lt;/li&gt;
  &lt;li&gt;解法1: 在 vc 裡面加個狀態，此狀態表示是否已經過了第一次 viewIsAppearing(:)&lt;/li&gt;
  &lt;li&gt;但還有更好的解法，解法2: 將這個狀態改成 optional closure&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;參考文獻&quot;&gt;參考文獻&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.marvinswift.com/swift/wwdc23-whats-new-in-uikit.html&quot;&gt;WWDC23 - What’s new in UIKit 重點整理&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiviewcontroller/4195485-viewisappearing&quot;&gt;Apple 的 viewIsAppearing 文件&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=n9ObNkPP5GY&quot;&gt;Essential Developer 的 Youtube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.essentialdeveloper.com/articles/fixing-ios-17-breaking-changes-uirefreshcontrol-viewisappearing-testability-ios-dev-mentoring&quot;&gt;Essential Developer 的網站&lt;/a&gt;&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="swift" /><category term="Swift" /><category term="iOS" /><category term="UIRefreshControl" /><summary type="html">今天早上(2023/11/18)，今天發生了幾件大事</summary></entry></feed>