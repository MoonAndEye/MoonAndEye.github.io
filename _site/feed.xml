<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-04-19T14:12:22+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Marvin 的 Swift 與程式開發筆記</title><subtitle>這個 blog 是包含了的軟體開發、投資、經驗和生活故事。透過這個 blog，我希望分享自己的生活和見聞，同時也透過這個平台與讀者交流互動，建立起彼此的社群。</subtitle><author><name>Marvin Lin</name></author><entry><title type="html">Swift 中的 Value type 和 Reference type</title><link href="http://localhost:4000/swift/ref-type-val-type-in-swift.html" rel="alternate" type="text/html" title="Swift 中的 Value type 和 Reference type" /><published>2023-04-19T11:42:00+08:00</published><updated>2023-04-19T11:42:00+08:00</updated><id>http://localhost:4000/swift/ref-type-val-type-in-swift</id><content type="html" xml:base="http://localhost:4000/swift/ref-type-val-type-in-swift.html">&lt;p&gt;在我以前的文章 &lt;a href=&quot;https://moonandeye.github.io/swift/2018/06/09/prototype-patter.html&quot;&gt;Prototype Pattern (原型模式) in Swift (Reference type vs. Value type 的不同)&lt;/a&gt; 中，已經有提到 Referce type 和 value type 在修改上的差別。但那一篇是來自於 Swift 的 Design Pattern 一書中，Prototype pattern 的延伸。這邊想再寫一篇 Value type 和 Reference type 的文章。&lt;/p&gt;

&lt;h3 id=&quot;reference-type&quot;&gt;Reference Type&lt;/h3&gt;

&lt;p&gt;class 是 reference types。Swift 5.5 以後的 actor 也是 reference type。&lt;/p&gt;

&lt;h3 id=&quot;value-type&quot;&gt;Value Type&lt;/h3&gt;

&lt;p&gt;struct 宣告的物件, enum, tuple, Dict, Array 都是 value types。&lt;/p&gt;

&lt;h2 id=&quot;在-swift-語言中將-value-type-設計為主要結構的原因&quot;&gt;在 Swift 語言中，將 value type 設計為主要結構的原因&lt;/h2&gt;

&lt;p&gt;我目前查到最早的文章，是在 Swift 還在發展的時候寫的 blog。文章連結在下面，發文日期為 2014 年 8 月 15 日。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/swift/blog/?id=10&quot;&gt;Value and Reference Types - Swift 部落格&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在後面幾段中有提到 &lt;strong&gt;The Role of Mutation in Safety「變異在安全性中的作用」&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;選擇值類型而不是引用類型的主要原因之一是能夠更輕鬆地理解程式碼。如果您始終獲得獨立的複製實例，您可以信任應用程序的其他部分不會在幕後更改數據。這在多線程環境中特別有用，其中不同的線程可能會在您之下更改數據。這可能會產生非常難以調試的嚴重錯誤。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;由於差異是以修改數據時發生的情況來定義的，因此有一種情況是值型和引用型重疊的：當實例沒有可寫數據時。在沒有變異的情況下，值和引用的行為完全相同。你可能會想到一種情況，即完全不可變的類別可能是有價值的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;在 Swift 中，Array、String 和 Dictionary 都是值類型。它們的行為非常像 C 中的簡單 int 值，作為該數據的唯一實例。你不需要做任何特殊的事情——比如進行顯式複製——來防止其他代碼在背後修改該數據。重要的是，你可以安全地在線程之間傳遞值的副本而不需要同步。為了提高安全性，這種模型將幫助你在 Swift 中編寫更可預測的代碼。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;swift-的-array-是-value-type那這些操作會更改什麼&quot;&gt;Swift 的 Array 是 value type，那這些操作，會更改什麼？&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// 忍者龜的宣告，注意! 這邊用 reference type class&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NinjaTurtle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 先初始化一隻忍者龜，並命名為達文西&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;turtle1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NinjaTurtle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;turtle1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;達文西&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 再初始化一隻忍者龜，並命名為米開朗基羅&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;turtle2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NinjaTurtle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;turtle1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;米開朗基羅&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;/// 兩隻忍者龜裝進同一個 array 裡面&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;turtles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;turtle1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;turtle2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;/// 因為 array 是 value type，所以這個賦值是 copy&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;copiedTurtles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;turtles&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;/// 我們把原來 array 的烏龜拿出來，並命名為 拉斐爾&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;turtles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;拉斐爾&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;/// 請問，複製的 array 裡面，第 0 隻烏龜的名字，是 拉斐爾 還是 達文西&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copiedTurtles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面這段程式碼，建議自己跑過一遍，然後去驗證自己的想法。&lt;/p&gt;

&lt;p&gt;如果會碰到其他語言的話，也可以把相同的邏輯，試著去跑在 Kotlin, Python, Java, C#, Rust 上，看看是一樣？還是不一樣？&lt;/p&gt;

&lt;h2 id=&quot;在什麼場景下要選擇哪個-type&quot;&gt;在什麼場景下，要選擇哪個 type？&lt;/h2&gt;

&lt;h3 id=&quot;以下場景適合用-value-type&quot;&gt;以下場景，適合用 value type&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;比較兩個物件時，用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;==&lt;/code&gt; 比較合理&lt;/li&gt;
  &lt;li&gt;當你在複製時，複製後的物件和複製前的物件彼此狀態應該是獨立時&lt;/li&gt;
  &lt;li&gt;data 會在多個執行緒下被操作時&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;以下場景適合用-reference-type-class&quot;&gt;以下場景，適合用 reference type (class)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;比較兩個物件時，用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;===&lt;/code&gt; 比較合理&lt;/li&gt;
  &lt;li&gt;需求使用會被共享且變更的狀態時&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;相關連結&quot;&gt;相關連結&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://moonandeye.github.io/swift/2018/06/09/prototype-patter.html&quot;&gt;Prototype Pattern (原型模式) in Swift (Reference type vs. Value type 的不同)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/swift/blog/?id=10&quot;&gt;Value and Reference Types - Swift 部落格&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.swift.org/swift-book/documentation/the-swift-programming-language/classesandstructures/&quot;&gt;Structures and Clases - swif.org&lt;/a&gt;&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="swift" /><category term="Swift" /><summary type="html">在我以前的文章 Prototype Pattern (原型模式) in Swift (Reference type vs. Value type 的不同) 中，已經有提到 Referce type 和 value type 在修改上的差別。但那一篇是來自於 Swift 的 Design Pattern 一書中，Prototype pattern 的延伸。這邊想再寫一篇 Value type 和 Reference type 的文章。</summary></entry><entry><title type="html">在 SwiftUI 專案中，加上 AppDelegate</title><link href="http://localhost:4000/swift/appdelegate-in-swiftui.html" rel="alternate" type="text/html" title="在 SwiftUI 專案中，加上 AppDelegate" /><published>2023-04-18T22:43:00+08:00</published><updated>2023-04-18T22:43:00+08:00</updated><id>http://localhost:4000/swift/appdelegate-in-swiftui</id><content type="html" xml:base="http://localhost:4000/swift/appdelegate-in-swiftui.html">&lt;p&gt;在 SwiftUI 發表之後，開啟一個專案的方式，多了 SwiftUI 的設定。如果你選擇使用 SwiftUI 開啟專案，原來的 AppDelegate 還有 SceneDelegate 檔案不會出現。而檔案的進入點，會是一個和專案同樣名稱的 SwiftUI 檔，裡面有個 Scene 並把 WindowGroup 包住。&lt;/p&gt;

&lt;p&gt;雖然 AppDelegate 不見了，但有些原來在 AppDelegate 裡面要做的事情，你仍然要做。舉例來說，一個專案基本上還是需要有 Crashlytics 來紀錄程式的崩潰和 Analytics來紀錄基本的使用者日活/週活/月活。而這些紀錄程式的發動點，仍要放在 AppDelegate 相關的生命週期中。&lt;/p&gt;

&lt;h3 id=&quot;使用-swiftui-建置專案啟動點沒有-appdelegate&quot;&gt;使用 SwiftUI 建置專案，啟動點沒有 AppDelegate&lt;/h3&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@main&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FooApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scene&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;WindowGroup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;ContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;新增-appdelegateswift-檔案&quot;&gt;新增 AppDelegate.swift 檔案&lt;/h3&gt;

&lt;p&gt;先新增一個 AppDelegate.swift 檔案，並加上 AppDelegate 的類別&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIKit&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplicationDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didFinishLaunchingWithOptions&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;launchOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;LaunchOptionsKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 去做原來在 App 啟動時就會進行的動作&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 像是 Crashlytics 啟動，Firebase 啟動，Analytics 啟動&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;在-swiftui-中加上-appdelegate&quot;&gt;在 SwiftUI 中加上 AppDelegate&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SwiftUI&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;@main&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FooApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;@UIApplicationDelegateAdaptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AppDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;appDelegate&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scene&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;WindowGroup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;CryptoCoinListView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;如果你是寫-watch-app-or-macos-app-你的-appdelegate-conform-的-protocol-會有一點不一樣&quot;&gt;如果你是寫 Watch App or macOS App 你的 AppDelegate conform 的 protocol 會有一點不一樣&lt;/h2&gt;

&lt;h3 id=&quot;watch-app&quot;&gt;Watch App&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WatchKit&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKApplicationDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;applicationDidFinishLaunching&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 去做原來在 App 啟動時就會進行的動作&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 像是 Crashlytics 啟動，Firebase 啟動，Analytics 啟動&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SwiftUI&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;@main&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FooWatchApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;@WKApplicationDelegateAdaptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AppDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;appDelegate&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scene&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;WindowGroup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;WatchContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;macos-app&quot;&gt;macOS App&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppKit&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SwiftUI&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSApplicationDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didRegisterForRemoteNotificationsWithDeviceToken&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;deviceToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 去做原來在 App 啟動時就會進行的動作&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 像是 Crashlytics 啟動，Firebase 啟動，Analytics 啟動&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SwiftUI&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;@main&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FooMacAppApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
    &lt;span class=&quot;kd&quot;&gt;@NSApplicationDelegateAdaptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AppDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;delegate&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scene&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;WindowGroup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;MacContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;相關連結&quot;&gt;相關連結&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://firebase.google.com/docs/ios/setup#swiftui&quot;&gt;Firebase iOS 專案 Tutorial&lt;/a&gt;&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="swift" /><category term="Swift" /><category term="SwiftUI" /><summary type="html">在 SwiftUI 發表之後，開啟一個專案的方式，多了 SwiftUI 的設定。如果你選擇使用 SwiftUI 開啟專案，原來的 AppDelegate 還有 SceneDelegate 檔案不會出現。而檔案的進入點，會是一個和專案同樣名稱的 SwiftUI 檔，裡面有個 Scene 並把 WindowGroup 包住。</summary></entry><entry><title type="html">使用 async/await 串接 escaping closure</title><link href="http://localhost:4000/swift/async-await-connect-closure.html" rel="alternate" type="text/html" title="使用 async/await 串接 escaping closure" /><published>2023-04-18T13:22:00+08:00</published><updated>2023-04-18T13:22:00+08:00</updated><id>http://localhost:4000/swift/async-await-connect-closure</id><content type="html" xml:base="http://localhost:4000/swift/async-await-connect-closure.html">&lt;h2 id=&quot;使用-swift-asyncawait-串接-closure-的方法&quot;&gt;使用 swift async/await 串接 closure 的方法&lt;/h2&gt;

&lt;p&gt;如果一個專案是從 Swift 還沒有 combine 的時代就開始進行，那專案中會有大量的 @escaping closure 在做非同步的資料傳遞。在 Swift 5.5 之後，Swift 加進了 async/await 的語法，讓需要進行非同步的任務，不再需要在撰寫的時候有一堆的大括號。&lt;/p&gt;

&lt;p&gt;所以&lt;/p&gt;

&lt;p&gt;現在會有一個新的情境，以前的 lib 已經寫好 URLRequest 的方法，並使用 closure 進行傳值。把已經寫好的 escaping closure 全部改寫意義可能不大，而且也伴隨著一定程度的風險。因此，能另外寫一個 func 進行 async/await 轉接，並保留原來的 closure，是一個風險較低的選項。&lt;/p&gt;

&lt;h2 id=&quot;包一層-async-func-的方法&quot;&gt;包一層 async func 的方法&lt;/h2&gt;

&lt;h3 id=&quot;原來發送-request-的類別&quot;&gt;原來發送 request 的類別&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;// 將 Alamofire 包起來的 Adapter，每個 func 只是使用 Alamofire 發送 URL Request&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AlamofireAdapter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// 原來的 closure func&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCoinMarketsInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coutPerPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sparkLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CoinMarketInfoElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 省略實作 implement code omitted&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// implemented code omitted&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;擴充-request-到-asyncawait&quot;&gt;擴充 request 到 async/await&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 對 AlamofireAdapter 進行擴充&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AlamofireAdapter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 開出能使用 await 的 func，但實際上是呼叫原來的 getCoinMarketsInfo&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCoinList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;countPerPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CoinMarketInfoElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// 進行轉接&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withCheckedContinuation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continuation&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;alamofireAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getCoinMarketsInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coutPerPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countPerPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sparkLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;continuation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;returning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;withCheckedContinuation()&lt;/code&gt; 就可以將以前的 closure 資料，使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;continuation&lt;/code&gt; 進行 async return。&lt;/p&gt;

&lt;h3 id=&quot;contentview-使用-getcoinlist&quot;&gt;ContentView 使用 getCoinList()&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fechList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getCoinList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                    
                    &lt;span class=&quot;kt&quot;&gt;DispatchQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;updateLastFetchTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cryptoList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;you got list, count: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, first: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;describing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fetch market got error: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, description: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localizedDescription&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;使用在-swiftui-的-view-時&quot;&gt;使用在 SwiftUI 的 View 時&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;# 在 SwiftUI 上使用時&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SwiftUI&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alamofireAdapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AlamofireAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;@State&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cryptoList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CoinMarketInfoElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;this is test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;fetchList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alamofireAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getCoinList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                
                &lt;span class=&quot;kt&quot;&gt;DispatchQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cryptoList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fetch market got error: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, description: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localizedDescription&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;結尾&quot;&gt;結尾&lt;/h2&gt;

&lt;p&gt;請注意 async/await 還是需要專案最低支援在 iOS 13 以上，如果你的專案沒辦法低於 iOS 13，那還是沒辦法使用 async/await。&lt;/p&gt;

&lt;p&gt;在我個人的 side project 上，我已經試著使用 SwiftUI 寫一些小專案，在使用 async/await 後，很多非同步的 feature 處理的程式碼，在人類眼中非常好讀。或許在 Apple 不斷的推進 Xcdoe 最低上架版本後，我會不斷的增加 async/await 程式碼的比重。目前，在專案上我仍然有很多 closure 在進行傳值。&lt;/p&gt;

&lt;h2 id=&quot;相關資料&quot;&gt;相關資料&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/main/proposals/0300-continuation.md&quot;&gt;Swift evolution on continuation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2021/10132/&quot;&gt;WWDC21: - Meet async/await in Swift&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.swift.org/swift-book/documentation/the-swift-programming-language/concurrency/&quot;&gt;swift.org - Concurrency&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.hackingwithswift.com/swift/5.5/continuations&quot;&gt;Hacking With Swift 的文章&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/forums/thread/681980&quot;&gt;Apple 開發者論壇的討論&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://forums.swift.org/t/will-swift-concurrency-deploy-back-to-older-oss/49370&quot;&gt;在 Swift 論壇上對向前支援非常激烈的討論&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.swiftbysundell.com/special/swift-concurrency-backward-compatibility/&quot;&gt;Swift Concurrency 向下支援的文章&lt;/a&gt;&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="swift" /><category term="Swift" /><category term="Combine" /><category term="非同步" /><summary type="html">使用 swift async/await 串接 closure 的方法</summary></entry><entry><title type="html">玉山金股票4/18開始申購，目前價差約在 5000 元</title><link href="http://localhost:4000/finance/esun-subscription-stock.html" rel="alternate" type="text/html" title="玉山金股票4/18開始申購，目前價差約在 5000 元" /><published>2023-04-18T11:51:00+08:00</published><updated>2023-04-18T11:51:00+08:00</updated><id>http://localhost:4000/finance/esun-subscription-stock</id><content type="html" xml:base="http://localhost:4000/finance/esun-subscription-stock.html">&lt;p&gt;玉山金股票4/18開始申購，4/20截止，這是一個值得關注的投資機會。玉山金是台灣最大的金融控股公司之一，旗下有玉山銀行、玉山證券、玉山保險等子公司，涵蓋了銀行、證券、保險、信託等多元金融業務。玉山金在2022年的營收和淨利都創下了歷史新高，並且發放了高達8元的現金股利，股息率達到了5.3%。玉山金的財務表現得到了市場的認可，股價在今年上漲了近30%。&lt;/p&gt;

&lt;p&gt;玉山金此次申購的目的是為了籌措資金，擴大業務規模，提升競爭力。玉山金計劃發行1.5億股新股，每股面額10元，發行價格為152元，折價率為9.5%。申購者需要有玉山金的原股權利證，每張原股權利證可以申購1.5股新股。原股權利證的市價目前約為23元，加上新股發行價格，申購者實際支付的成本約為230元，相當於目前市價的9折。&lt;/p&gt;

&lt;p&gt;玉山金的申購是否值得參與呢？我們可以從幾個方面來分析。首先，玉山金的基本面非常穩健，具有良好的成長性和盈利能力。玉山金在數位化轉型方面也領先同業，推出了多項創新的服務和產品，例如玉山Wallet、玉山Pay、玉山Pi等，吸引了大量的年輕客戶。其次，玉山金的估值相對合理，目前的本益比約為13倍，低於同業平均水準。玉山金的股東權益報酬率也高達16%，遠超過同業和市場平均水準。最後，玉山金的申購折價率也相當吸引人，可以讓申購者獲得一定的套利空間。&lt;/p&gt;

&lt;p&gt;綜上所述，玉山金的申購是一個不錯的投資機會，適合有長期持有意願和風險承受能力的投資者參與。不過，申購者也要注意市場風險和波動性，並且根據自己的財務狀況和投資目標做出合理的判斷和決策。&lt;/p&gt;

&lt;h2 id=&quot;相關網站&quot;&gt;相關網站&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://tw.stock.yahoo.com/news//%E7%8E%89%E5%B1%B1%E9%87%914-18%E9%96%8B%E5%A7%8B%E7%94%B3%E8%B3%BC-%E6%AC%A1%E5%8F%AF%E6%8A%BD2%E5%BC%B5-%E6%8A%BD%E4%B8%AD%E7%8F%BE%E8%B3%BA1-1%E8%90%AC-041138807.html&quot;&gt;玉山金申購&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.businesstoday.com.tw/article/category/183012/post/202304160003/&quot;&gt;今周刊&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ctee.com.tw/news/stocks/845545.html&quot;&gt;工商時報&lt;/a&gt;&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="finance" /><category term="finance" /><category term="台股" /><category term="申購" /><summary type="html">玉山金股票4/18開始申購，4/20截止，這是一個值得關注的投資機會。玉山金是台灣最大的金融控股公司之一，旗下有玉山銀行、玉山證券、玉山保險等子公司，涵蓋了銀行、證券、保險、信託等多元金融業務。玉山金在2022年的營收和淨利都創下了歷史新高，並且發放了高達8元的現金股利，股息率達到了5.3%。玉山金的財務表現得到了市場的認可，股價在今年上漲了近30%。</summary></entry><entry><title type="html">薩爾達王國之淚影片釋出</title><link href="http://localhost:4000/life/zelda-trail-3rd.html" rel="alternate" type="text/html" title="薩爾達王國之淚影片釋出" /><published>2023-04-14T09:54:00+08:00</published><updated>2023-04-14T09:54:00+08:00</updated><id>http://localhost:4000/life/zelda-trail-3rd</id><content type="html" xml:base="http://localhost:4000/life/zelda-trail-3rd.html">&lt;h2 id=&quot;薩艾達傳說-王國之淚-的第三部影片釋出了之前有寫過青沼英二親自實機試玩的文章&quot;&gt;薩艾達傳說 王國之淚 的第三部影片釋出了，之前有寫過青沼英二親自實機試玩的文章。&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://moonandeye.github.io/programming/zelda-tears-of-the-kingdom.html&quot;&gt;王國之淚試玩影片文章&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;而今天早上起來，又看到新的影片了，裡面有更多的元素。&lt;/p&gt;

&lt;h3 id=&quot;火箭升空&quot;&gt;火箭升空&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/zelda-tears-of-the-kingdom/link_rocket.jpeg&quot; alt=&quot;rocket launch&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;雷射機關&quot;&gt;雷射機關&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/zelda-tears-of-the-kingdom/link_laser.jpeg&quot; alt=&quot;laser&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;戰爭用載具&quot;&gt;戰爭用載具？&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/zelda-tears-of-the-kingdom/link_tank.jpeg&quot; alt=&quot;war tank&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;薩爾達傳說-王國之淚第3部介紹影片台灣&quot;&gt;《薩爾達傳說 王國之淚》第3部介紹影片（台灣）&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/omOOGfivXQs&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;王國之淚&quot;&gt;王國之淚&lt;/h2&gt;

&lt;p&gt;《薩艾達傳說 王國之淚》是任天堂開發的一款開放世界動作冒險遊戲，是2017年發售的《薩艾達傳說 曠野之息》的續作，預定於2023年5月12日在任天堂Switch上發售。這款遊戲延續了前作的開放式探索和自由度，同時加入了新的故事和遊戲元素，例如可以在海拉魯大陸的上空飛行。&lt;/p&gt;

&lt;p&gt;第三部影片是在2022年9月13日的任天堂直面會中公開的，同時也揭露了遊戲的正式名稱《王國之淚》。影片中展示了主角薩艾達和茲爾達在地下和空中的冒險，以及一些新的敵人和道具。影片還透露了遊戲的一些劇情設定，例如茲爾達被一股黑暗力量吞噬，而薩艾達則要找出拯救她和王國的方法。&lt;/p&gt;

&lt;p&gt;影片的最後還出現了一個神秘的角色，他似乎是遊戲的反派，也可能是海拉魯王國的創造者或守護者。他有著金色的眼睛和長髮，身穿黑色的長袍，手持一把劍。他的身份和目的都是未知數，引發了許多玩家和粉絲的猜測和討論。&lt;/p&gt;

&lt;p&gt;《薩艾達傳說 王國之淚》是我最期待的遊戲之一，我非常喜歡前作《曠野之息》的自由度和創意，也很好奇這次的故事會如何發展。我相信任天堂會帶給我們一個精彩而深刻的冒險體驗。如果您也對這款遊戲感興趣，可以在以下網址觀看第三部影片。&lt;/p&gt;

&lt;h2 id=&quot;參考連結&quot;&gt;參考連結&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://moonandeye.github.io/programming/zelda-tears-of-the-kingdom.html&quot;&gt;薩爾達傳說 王國之淚 試玩影片發表，製作人青沼英二親自實機試玩&lt;/a&gt;&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="life" /><category term="薩爾達" /><category term="Switch" /><category term="Nintendo" /><summary type="html">薩艾達傳說 王國之淚 的第三部影片釋出了，之前有寫過青沼英二親自實機試玩的文章。</summary></entry><entry><title type="html">台股國安基金退場，護盤275天</title><link href="http://localhost:4000/finance/tw-national-security-fund.html" rel="alternate" type="text/html" title="台股國安基金退場，護盤275天" /><published>2023-04-14T09:27:00+08:00</published><updated>2023-04-14T09:27:00+08:00</updated><id>http://localhost:4000/finance/tw-national-security-fund</id><content type="html" xml:base="http://localhost:4000/finance/tw-national-security-fund.html">&lt;h2 id=&quot;outlines&quot;&gt;Outlines&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;國安基金自去年7月13日起執行安定市場任務，為穩定台股信心，投入545.08億元買進股票。&lt;/li&gt;
  &lt;li&gt;進場期間，台股累計上漲1854.14點，累積漲幅13.29%，優於多數主要股市，國安基金也累計獲利83億元，投資報酬率15%。&lt;/li&gt;
  &lt;li&gt;今日董事會決議，國安基金自明日起停止執行安定市場任務，回歸證券交易市場機制，結束275天史上最長護盤。&lt;/li&gt;
  &lt;li&gt;國安基金執秘表示，退場動作會很小心、時程可能拉長，不會影響到市場；未來仍會密切關注國內外政經情勢變動，必要時再授權執行安定市場任務。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;目前最長護盤任務結束&quot;&gt;目前最長護盤任務結束&lt;/h2&gt;

&lt;p&gt;台股國安基金退場，護盤275天&lt;/p&gt;

&lt;p&gt;台股國安基金在史上最長的護盤任務結束了。自去年7月13日起，國安基金為了穩定台股信心，投入545.08億元買進股票，進場期間，台股累計上漲1854.14點，累積漲幅13.29%，優於多數主要股市，國安基金也累計獲利83億元，投資報酬率15%。今日董事會決議，國安基金自明日起停止執行安定市場任務，回歸證券交易市場機制。&lt;/p&gt;

&lt;p&gt;國安基金的護盤任務是在去年7月13日開始的，當時台股受到美中貿易戰、新冠疫情、美伊衝突等多重因素影響，出現大幅波動，市場信心不足。為了維持市場穩定，行政院授權國安基金執行安定市場任務，並設立專案小組，由財政部長蘇建榮擔任召集人，負責決策與監督。&lt;/p&gt;

&lt;p&gt;國安基金的進場策略是以買進大盤股為主，尤其是具有代表性的電子股、金融股、傳產股等。根據財政部的統計，國安基金在進場期間共買進了545.08億元的股票，其中電子股占了62.8%，金融股占了17.9%，傳產股占了10.5%。國安基金的買進行為不僅提振了市場氣氛，也帶動了外資與法人的跟進買盤。&lt;/p&gt;

&lt;p&gt;國安基金的護盤成果也相當亮眼。在進場期間，台股從去年7月13日的11677.41點上漲到今日的13531.55點，累計上漲1854.14點，累積漲幅13.29%，優於多數主要股市。例如，在同期間內，美國道瓊工業指數累計漲幅為11.26%，日本日經225指數累計漲幅為9.76%，中國上證綜合指數累計漲幅為6.81%。此外，國安基金也累計獲利83億元，投資報酬率15%，創下歷史新高。&lt;/p&gt;

&lt;p&gt;今日董事會決議，國安基金自明日起停止執行安定市場任務，回歸證券交易市場機制。國安基金執秘表示，退場動作會很小心、時程可能拉長，不會影響到市場；未來仍會密切關注國內外政經情勢變動，必要時再授權執行安定市場任務。&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="台股國安基金退場，護盤275天" /><category term="台股" /><summary type="html">Outlines</summary></entry><entry><title type="html">美國 PPI 年增率降至 2.7%</title><link href="http://localhost:4000/finance/us-ppi-non-employed.html" rel="alternate" type="text/html" title="美國 PPI 年增率降至 2.7%" /><published>2023-04-14T09:10:00+08:00</published><updated>2023-04-14T09:10:00+08:00</updated><id>http://localhost:4000/finance/us-ppi-non-employed</id><content type="html" xml:base="http://localhost:4000/finance/us-ppi-non-employed.html">&lt;h2 id=&quot;美國勞動市場和通膨狀況的最新數據&quot;&gt;美國勞動市場和通膨狀況的最新數據&lt;/h2&gt;

&lt;p&gt;美國勞工部近日公布了 2023 年 3 月的失業救濟金人數和生產者物價指數 (PPI) 的數據，反映了美國勞動市場和通膨狀況的最新變化。這些數據對於分析美國經濟復甦的速度和聯準會 (Fed) 的貨幣政策走向有重要的參考價值。&lt;/p&gt;

&lt;p&gt;根據勞工部的報告 ，截至 4 月 8 日止的當周，美國新申請失業救濟金人數達到 23.9 萬人，比前一周增加了 1.1 萬人，也高於市場預期的 23.5 萬人。這是自 2020 年 3 月新冠疫情爆發後，失業救濟金人數首次連續三周超過 20 萬人。這表明美國勞動市場的緊俏狀況正在緩解，但仍處於高於歷史平均水準的危機狀態。&lt;/p&gt;

&lt;p&gt;另一方面，勞工部也公布了 2023 年 3 月的 PPI 數據  ，顯示美國生產者物價在當月比前月下降了 0.5%，是自 2020 年 4 月以來最大的降幅；而年增率則降至 2.7%，是兩年多來最小的升幅。PPI 的下跌主要歸因於能源價格的大幅回落，其中汽油價格下跌了 11.7%。PPI 是衡量批發價格的指標，通常被視為未來消費者物價指數 (CPI) 的領先指標。因此，PPI 的下跌可能在未來幾個月使整體通膨壓力緩和下來。&lt;/p&gt;

&lt;h2 id=&quot;fed-的目標&quot;&gt;FED 的目標&lt;/h2&gt;

&lt;p&gt;根據最新的數據，美國的生產者物價指數（PPI）在 2023 年 3 月份同比上漲了 2.7%，低於前一個月的 3.1%。這一數字反映了美國經濟的復蘇步伐放緩，以及通脹壓力的減輕。美聯儲（Fed）對此可能持一種審慎的態度，並繼續觀察 PPI 的變化趨勢，以及其他經濟指標，如消費者物價指數（CPI）、勞動力市場、經濟增長等。Fed 的目標是實現最大化就業和穩定物價，因此它可能不會過早地調整其貨幣政策，而是保持低利率和資產購買計劃，直到經濟完全復蘇並達到其目標為止。&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="finance" /><category term="finance" /><summary type="html">美國勞動市場和通膨狀況的最新數據</summary></entry><entry><title type="html">美3月CPI年增5%低於預期</title><link href="http://localhost:4000/finance/us-cpi-index.html" rel="alternate" type="text/html" title="美3月CPI年增5%低於預期" /><published>2023-04-13T10:48:00+08:00</published><updated>2023-04-13T10:48:00+08:00</updated><id>http://localhost:4000/finance/us-cpi-index</id><content type="html" xml:base="http://localhost:4000/finance/us-cpi-index.html">&lt;h2 id=&quot;美3月cpi年增5低於預期&quot;&gt;美3月CPI年增5%低於預期&lt;/h2&gt;

&lt;p&gt;美國勞工部周四公布，3月份消費者物價指數（CPI）同比上漲5%，低於市場預期的5.2%。這是自2008年9月以來最高的年增率，但仍反映出通脹壓力相對溫和。&lt;/p&gt;

&lt;p&gt;CPI的核心指數，剔除食品和能源等波動性項目，3月份同比上漲3.8%，也低於市場預期的4%。這是自1992年5月以來最高的年增率，主要受到汽車、服裝和航空票價等項目的上漲影響。&lt;/p&gt;

&lt;p&gt;美國勞工部表示，CPI的上漲部分是由於去年同期的低基數效應，當時疫情導致物價大幅下跌。如果將去年3月和4月的數據排除，CPI的年增率將分別降至2.6%和2.5%。&lt;/p&gt;

&lt;p&gt;美國聯邦儲備委員會（Fed）一直堅持認為，目前的通脹上升是暫時性的，並不會改變其寬鬆的貨幣政策立場。Fed主席鮑威爾周三在國會作證時表示，通脹壓力將在未來幾個月達到高峰，但隨著供需平衡恢復正常，通脹將回落至Fed的2%目標附近。&lt;/p&gt;

&lt;p&gt;市場分析師認為，美國CPI數據低於預期，有利於緩解市場對通脹過熱和利率上升的擔憂，並支撐股市和債市的表現。美元指數在數據公布後下跌，金價和原油價格上漲。&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="finance" /><category term="CPI" /><summary type="html">美3月CPI年增5%低於預期</summary></entry><entry><title type="html">Google Code Jam 將在 Apr 15 2023, 14:00 UTC 開始</title><link href="http://localhost:4000/programming/google-code-jam.html" rel="alternate" type="text/html" title="Google Code Jam 將在 Apr 15 2023, 14:00 UTC 開始" /><published>2023-04-12T00:23:00+08:00</published><updated>2023-04-12T00:23:00+08:00</updated><id>http://localhost:4000/programming/google-code-jam</id><content type="html" xml:base="http://localhost:4000/programming/google-code-jam.html">&lt;h2 id=&quot;round-a-比賽時間&quot;&gt;Round A 比賽時間&lt;/h2&gt;

&lt;p&gt;Round A
Apr 15 2023, 14:00 UTC 開始&lt;/p&gt;

&lt;p&gt;Apr 15 2023, 18:00 UTC 結束&lt;/p&gt;

&lt;h2 id=&quot;code-jam&quot;&gt;Code Jam&lt;/h2&gt;

&lt;p&gt;如果你是一位熱愛編程的人，那麼你一定不會錯過 Google 的 coding 比賽 Code Jam。Code Jam 是一項由 Google 主辦的國際程序設計競賽，旨在幫助 Google 發掘潛在的工程領域頂級人才。Code Jam 每年只舉行一次，但每次要進行好幾輪，通過層層篩選，最終從近 10 萬名報名者中選出 25 個人參加最後的全球總決賽。&lt;/p&gt;

&lt;p&gt;Code Jam 的比賽題目涵蓋了各種算法和數學問題，需要參賽者在有限的時間內寫出正確、高效、可讀的代碼。Code Jam 的難度很高，不僅考驗參賽者的基礎知識和邏輯思維，還考驗他們的創造力和應變能力。Code Jam 的魅力在於它能夠讓參賽者體驗到編程的樂趣和挑戰，同時也能夠讓他們學習到新的技術和知識。&lt;/p&gt;

&lt;h2 id=&quot;code-jam-的比賽流程&quot;&gt;Code Jam 的比賽流程&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;資格賽（Qualification Round）：所有報名的參賽者都可以參加這一輪，共有 4 個題目，時間為 30 小時。只要在時間內解出至少一個題目，就可以晉級到下一輪。&lt;/li&gt;
  &lt;li&gt;第一輪（Round 1）：分為 A、B、C 三個子輪，每個子輪有 4 個題目，時間為 2.5 小時。每個子輪的前 1500 名參賽者可以晉級到下一輪。&lt;/li&gt;
  &lt;li&gt;第二輪（Round 2）：有 4 個題目，時間為 3 小時。前 1000 名參賽者可以晉級到下一輪。&lt;/li&gt;
  &lt;li&gt;第三輪（Round 3）：有 4 個題目，時間為 3 小時。前 25 名參賽者可以晉級到決賽。&lt;/li&gt;
  &lt;li&gt;決賽（Finals）：在 Google 總部舉行，有 4 個題目，時間為 4 小時。最終的冠軍將獲得 15,000 美元的獎金和 Code Jam Champ 的稱號。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;比賽前的準備&quot;&gt;比賽前的準備&lt;/h2&gt;

&lt;p&gt;如果你想要參加 Code Jam，你需要具備以下條件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;熟悉至少一種支持的程式語言（C++、C#、Go、Java、JavaScript、Kotlin、Python 或 Swift）。&lt;/li&gt;
  &lt;li&gt;能夠使用 Google 提供的平台提交代碼和測試結果。&lt;/li&gt;
  &lt;li&gt;能夠閱讀和理解英文題目和規則。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果你想要了解更多關於 Code Jam 的信息，你可以訪問官方網站或關注官方社交媒體。&lt;/p&gt;

&lt;h2 id=&quot;連結&quot;&gt;連結&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://codingcompetitions.withgoogle.com/codejam&quot;&gt;Code Jam&lt;/a&gt;&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="programming" /><category term="Google" /><category term="Code Jam" /><summary type="html">Round A 比賽時間</summary></entry><entry><title type="html">大學教授對於 ChatGPT 在資訊相關領域的學生，開始了不同立場的論戰</title><link href="http://localhost:4000/programming/professor-article-about-ai.html" rel="alternate" type="text/html" title="大學教授對於 ChatGPT 在資訊相關領域的學生，開始了不同立場的論戰" /><published>2023-04-11T08:17:00+08:00</published><updated>2023-04-11T08:17:00+08:00</updated><id>http://localhost:4000/programming/professor-article-about-ai</id><content type="html" xml:base="http://localhost:4000/programming/professor-article-about-ai.html">&lt;h2 id=&quot;大學教授在各自的臉書上對於-chatgpt-的討論&quot;&gt;大學教授在各自的臉書上對於 ChatGPT 的「討論」&lt;/h2&gt;

&lt;p&gt;昨天晚上我個人的 FB 動態牆上，對於 ChatGPT 的討論突然變得非常多，好奇看了一下發生了什麼事。原來是蘇文鈺教授回了個「被罵了」的文章，再看前面所敘述的文字。因為蘇教授之前寫了一篇讓學生使用 ChatGPT 進行作業的文章。而李家同教授在 4/10 的聯合報寫了一篇關於 ChatGPT 的文章，標題如下。&lt;/p&gt;

&lt;h4 id=&quot;我們要創造不會思考的下一代&quot;&gt;[我們要創造不會思考的下一代？]&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://udn.com/news/story/7339/7086778&quot;&gt;新聞連結&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;很多人對ChatGPT極為推崇，甚至有大學資工系資深教授要求學生用ChatGPT寫程式。這則新聞令我膽戰心驚，嚇出一身冷汗，因為這樣做會害死學生。學生寫程式有兩個步驟，第一個步驟是畫出流程圖，第二個步驟是利用程式語言寫出程式來。流程圖有如造房子時的設計圖，畫流程圖是需要邏輯思考的，培養好的程式工程師，就是在培養他的邏輯思考能力。一旦流程圖畫對了，程式也就很容易寫出來了。反過來說，一個學生如果不會畫出流程圖，他是絕對不可能寫程式的…..&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然後，接下來就有一堆人跳出來，對這些文章進行不同的論述。&lt;/p&gt;

&lt;h2 id=&quot;贊成派&quot;&gt;贊成派&lt;/h2&gt;
&lt;h3 id=&quot;蘇文鈺教授讓學生直接使用-chatgpt-寫程式的-fb-貼文&quot;&gt;蘇文鈺教授讓學生直接使用 ChatGPT 寫程式的 FB 貼文&lt;/h3&gt;

&lt;iframe src=&quot;https://www.facebook.com/plugins/post.php?href=https%3A%2F%2Fwww.facebook.com%2Farwen.su.5%2Fposts%2Fpfbid0fyzvxLmk4cEra2RHMgcxBcHYvF8F6fjsFLPn5wwE2koh2AbGEjh77YcFvbkRo4iyl&amp;amp;show_text=true&amp;amp;width=500&quot; width=&quot;500&quot; height=&quot;824&quot; style=&quot;border:none;overflow:hidden&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;true&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; picture-in-picture; web-share&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;楊智傑副教授的看法&quot;&gt;楊智傑副教授的看法&lt;/h2&gt;

&lt;iframe src=&quot;https://www.facebook.com/plugins/post.php?href=https%3A%2F%2Fwww.facebook.com%2Fscatjay%2Fposts%2Fpfbid0Dqj7XjfvRSLDZYbd4VVxcBo3rFSB15zKRxRhUf4L6GYpu3cR3GwQhmRLy6Ehi84al&amp;amp;show_text=true&amp;amp;width=500&quot; width=&quot;500&quot; height=&quot;460&quot; style=&quot;border:none;overflow:hidden&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;true&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; picture-in-picture; web-share&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;李家同教授對-chatgpt-的立場&quot;&gt;李家同教授對 ChatGPT 的立場&lt;/h2&gt;

&lt;iframe src=&quot;https://www.facebook.com/plugins/post.php?href=https%3A%2F%2Fwww.facebook.com%2Fpermalink.php%3Fstory_fbid%3Dpfbid02umxnXfJiwTvgNQuMyMc5Xuh4tiw4yyevrkFeRmb7KjHyaXCtmPWhqiaBxMoghMDxl%26id%3D100007748738834&amp;amp;show_text=true&amp;amp;width=500&quot; width=&quot;500&quot; height=&quot;266&quot; style=&quot;border:none;overflow:hidden&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;true&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; picture-in-picture; web-share&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;蘇文鈺教授似乎是某篇文章進行回應的文章&quot;&gt;蘇文鈺教授「似乎」是某篇文章進行回應的文章&lt;/h2&gt;

&lt;iframe src=&quot;https://www.facebook.com/plugins/post.php?href=https%3A%2F%2Fwww.facebook.com%2Farwen.su.5%2Fposts%2Fpfbid0bZMbN59NPqa9WoSfa2Duw4s3iEaYJk17ikJSamJD96LXuMZRKvkpkjGmDvCJ6dXQl&amp;amp;show_text=true&amp;amp;width=500&quot; width=&quot;500&quot; height=&quot;307&quot; style=&quot;border:none;overflow:hidden&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;true&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; picture-in-picture; web-share&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;生成式-ai-對未來軟體的影響有無前例可循&quot;&gt;生成式 AI 對未來軟體的影響，有無前例可循？&lt;/h2&gt;

&lt;p&gt;曾經，人類使用獸力來當移動工具，所以有個職業是「馬伕」和「人力車」。&lt;/p&gt;

&lt;p&gt;1886 年德國工程師 卡爾．賓士 製造了三輪汽車。而後 載姆勒 製造出四輪汽車。&lt;/p&gt;

&lt;p&gt;接下來，人類在汽車上嚐試了各種動力源，在數十年前，主流為石油。&lt;/p&gt;

&lt;p&gt;而在近十年，自動駕駛的汽車配上電力源，變成大家注目的焦點。&lt;/p&gt;

&lt;p&gt;在汽車這個「概念」還沒有被發明之前，如果去問正在使用交通工具的人，大家都會回應「我想要更快的馬、吃更少的馬、休息更少的馬」。&lt;/p&gt;

&lt;p&gt;目前看 ChatGPT 發展的方向，我無法就此斷定 ChatGPT 這個產品真的可以一直贏到最後，但這個「概念」出現時，我可以保證，我們下一代的工作方式，不會和這個時代一樣&lt;/p&gt;

&lt;h2 id=&quot;其他連結&quot;&gt;其他連結&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://moonandeye.github.io/programming/2023/03/17/microsoft-office-copilot-launch.html&quot;&gt;微軟推出了名為「Microsoft 365 Copilot」的新生產力工具&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://moonandeye.github.io/programming/start-using-copilot.html&quot;&gt;開始使用 Github Copilot 服務，來讓 side project 加速&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://moonandeye.github.io/programming/bing-chat-brain-storming.html&quot;&gt;使用 Bing Chat 幫我發想一些 App 的 idea&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://moonandeye.github.io/finance/prompt-engineering.html&quot;&gt;Will 保哥翻譯自 DAIR.AI 的 “prompt engineering”「提示工程指南」&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://moonandeye.github.io/finance/ChatGPT-plugins.html&quot;&gt;ChatGPT 推出了 plugins，這會不會是 ChatGPT 的 AppStores?&lt;/a&gt;&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="programming" /><category term="AI" /><category term="ChatGPT" /><summary type="html">大學教授在各自的臉書上對於 ChatGPT 的「討論」</summary></entry></feed>