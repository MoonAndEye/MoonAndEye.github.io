<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="https://moonandeye.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://moonandeye.github.io/" rel="alternate" type="text/html" /><updated>2023-03-21T19:31:06+08:00</updated><id>https://moonandeye.github.io/feed.xml</id><title type="html">Marvin Lin’s Blogger</title><subtitle>這個 blog 是包含了的軟體開發、投資、經驗和生活故事。透過這個 blog，我希望分享自己的生活和見聞，同時也透過這個平台與讀者交流互動，建立起彼此的社群。</subtitle><author><name>Marvin Lin</name></author><entry><title type="html">玉山金控今年辦理現金增資案，預計現增8億股</title><link href="https://moonandeye.github.io/finance/2023/03/21/ESun-news.html" rel="alternate" type="text/html" title="玉山金控今年辦理現金增資案，預計現增8億股" /><published>2023-03-21T18:11:00+08:00</published><updated>2023-03-21T18:11:00+08:00</updated><id>https://moonandeye.github.io/finance/2023/03/21/ESun-news</id><content type="html" xml:base="https://moonandeye.github.io/finance/2023/03/21/ESun-news.html">&lt;p&gt;玉山金控今年辦理現金增資案，預計現增8億股。玉山金控/提供&lt;/p&gt;

&lt;p&gt;玉山金控 （2884）今年辦理現金 增資 案，預計現增8億股，發行價格暫定每股20元。玉山金控此次增資資金，將用於轉投資子公司玉山銀行供拓展業務之用及充實營運資金。玉山金控在今年2月董事會決議，現增普通股8億股，發行價格暫定每股20元，依照玉山金控今日收盤價23.75元計算，約有15.79%的折價率。&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="finance" /><category term="財經" /><category term="增資" /><category term="玉山金" /><summary type="html">玉山金控今年辦理現金增資案，預計現增8億股。玉山金控/提供</summary></entry><entry><title type="html">Open AI 發信給客戶，停止 Codex 相關服務</title><link href="https://moonandeye.github.io/programming/openai-stop-codex-api.html" rel="alternate" type="text/html" title="Open AI 發信給客戶，停止 Codex 相關服務" /><published>2023-03-21T10:58:00+08:00</published><updated>2023-03-21T10:58:00+08:00</updated><id>https://moonandeye.github.io/programming/openai-stop-codex-api</id><content type="html" xml:base="https://moonandeye.github.io/programming/openai-stop-codex-api.html">&lt;h2 id=&quot;open-ai-發信給客戶停止-codex-相關服務&quot;&gt;Open AI 發信給客戶，停止 Codex 相關服務&lt;/h2&gt;

&lt;p&gt;在3月23日，我們將停止支援Codex API。所有客戶將需要轉換到其他模型。Codex最初在2021年以免費有限制的測試版推出，一直保持著該狀態。考慮到我們最新的GPT-3.5代碼任務模型的進展，我們將不再支援Codex，並鼓勵所有客戶轉換到GPT-3.5-Turbo。
關於GPT-3.5-Turbo
GPT-3.5-Turbo是GPT-3.5系列中性價比最高、性能最優的模型。它可以進行編程任務，同時還具備靈活的自然語言能力。&lt;/p&gt;

&lt;p&gt;您可以通過以下方式了解更多：
GPT-3.5模型概述
聊天補全指南&lt;/p&gt;

&lt;p&gt;受影響的模型
以下模型將被停止支援：
code-cushman:001
code-cushman:002
code-davinci:001
code-davinci:002&lt;/p&gt;

&lt;p&gt;我們了解這個轉變可能暫時有些不便，但我們相信這將使我們能夠增加對我們最新和最能力強的模型的投資。&lt;/p&gt;

&lt;p&gt;OpenAI團隊&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;英文原文&quot;&gt;英文原文&lt;/h2&gt;

&lt;p&gt;On March 23rd, we will discontinue support for the Codex API. All customers will have to transition to a different model. Codex was initially introduced as a free limited beta in 2021, and has maintained that status to date. Given the advancements of our newest GPT-3.5 models for coding tasks, we will no longer be supporting Codex and encourage all customers to transition to GPT-3.5-Turbo.
About GPT-3.5-Turbo
GPT-3.5-Turbo is the most cost effective and performant model in the GPT-3.5 family. It can both do coding tasks while also being complemented with flexible natural language capabilities.&lt;/p&gt;

&lt;p&gt;You can learn more through:
GPT-3.5 model overview
Chat completions guide&lt;/p&gt;

&lt;p&gt;Models affected
The following models will be discontinued:
code-cushman:001
code-cushman:002
code-davinci:001
code-davinci:002&lt;/p&gt;

&lt;p&gt;We understand this transition may be temporarily inconvenient, but we are confident it will allow us to increase our investment in our latest and most capable models.&lt;/p&gt;

&lt;p&gt;—The OpenAI team&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="programming" /><category term="programming" /><category term="AI" /><category term="Open AI" /><category term="ChatGPT" /><category term="Codex" /><summary type="html">Open AI 發信給客戶，停止 Codex 相關服務</summary></entry><entry><title type="html">台灣政府普發現金6000元</title><link href="https://moonandeye.github.io/finance/2023/03/21/taiwan-government-returnsix-thounds.html" rel="alternate" type="text/html" title="台灣政府普發現金6000元" /><published>2023-03-21T09:01:00+08:00</published><updated>2023-03-21T09:01:00+08:00</updated><id>https://moonandeye.github.io/finance/2023/03/21/taiwan-government-returnsix-thounds</id><content type="html" xml:base="https://moonandeye.github.io/finance/2023/03/21/taiwan-government-returnsix-thounds.html">&lt;p&gt;台灣政府最近要普發6000元現金，因為徵稅超過預算數4500億元。這項政策旨在讓全民共享經濟成果，並刺激消費和投資。領取對象包括國內戶籍國民、取得居留權的外籍人士、特定偏鄉地區居民等，不分年齡層。&lt;/p&gt;

&lt;p&gt;領取方式有三種：一是線上申請後直接匯入戶頭；二是持提款卡至指定銀行ATM領取；三是持健保卡至郵局臨櫃領取 。其中，線上申請系統將於2023年3月22日上午8點開放登記，登記網址為https://6000.gov.tw。ATM領取則可選擇12家金融機構（含郵局）的24922台ATM。&lt;/p&gt;

&lt;p&gt;發放時間則視立法院審查特別預算的時程而定 。目前特別預算已於2023年2月21日立法院三讀通過，但仍需等待冷凍期過後才能正式執行。行政院表示會盡快完成相關準備工作，並確保金融系統的穩定與安全。&lt;/p&gt;

&lt;p&gt;此次普發現金的原因是政府實徵稅收超過原先的預算數4500億元 。財政部代理部長阮清華說明，這些稅收都是依法課稅，沒有超徵或違法的問題。除了普發現金之外，政府還將把多出來的稅收分給地方政府、補助勞健保、補貼電價等方面 。&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="finance" /><category term="finance" /><summary type="html">台灣政府最近要普發6000元現金，因為徵稅超過預算數4500億元。這項政策旨在讓全民共享經濟成果，並刺激消費和投資。領取對象包括國內戶籍國民、取得居留權的外籍人士、特定偏鄉地區居民等，不分年齡層。</summary></entry><entry><title type="html">iPlayground 2023 開始跑啦，歡迎應徵工作人員</title><link href="https://moonandeye.github.io/swift/2023/03/21/iplaygroundIn.html" rel="alternate" type="text/html" title="iPlayground 2023 開始跑啦，歡迎應徵工作人員" /><published>2023-03-21T08:30:00+08:00</published><updated>2023-03-21T08:30:00+08:00</updated><id>https://moonandeye.github.io/swift/2023/03/21/iplaygroundIn</id><content type="html" xml:base="https://moonandeye.github.io/swift/2023/03/21/iplaygroundIn.html">&lt;p&gt;這個消息，有公佈在 &lt;a href=&quot;https://www.ethanhuang13.com/p/179&quot;&gt;13 的電子報第 179 期&lt;/a&gt;，如果想要當 iPlayground 工作人員的朋友，歡迎在 13 的電子報上，進行回覆，就可以報名囉。&lt;/p&gt;

&lt;h1 id=&quot;參與開發者年會的好處&quot;&gt;參與開發者年會的好處&lt;/h1&gt;

&lt;p&gt;開發者年會是一個讓開發者們交流、學習、分享和合作的平台，它有許多好處，不僅可以提升自己的技能和知識，也可以擴展自己的人脈和視野。以下是一些參與開發者年會的好處：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;學習最新的技術和趨勢。開發者年會通常會邀請業界的專家和領導者來分享他們的經驗和見解，讓你了解最新的技術和趨勢，以及如何應用到你自己的項目中。&lt;/li&gt;
  &lt;li&gt;獲得實用的建議和反饋。開發者年會也是一個讓你展示你自己的作品和想法的機會，你可以向其他開發者或評審求教或徵求意見，獲得實用的建議和反饋，幫助你改進你自己的產品或服務。&lt;/li&gt;
  &lt;li&gt;建立聯繫和合作。開發者年會讓你有機會認識來自不同背景、領域和地區的其他開發者，你可以與他們交流、學習、分享和合作，建立聯繫和信任，創造更多可能性。&lt;/li&gt;
  &lt;li&gt;獲得靈感和動力。開發者年會讓你看到其他開發者所做出來的驚人成果，讓你感受到他們對於創新和改變世界的熱情，給予你靈感和動力，激勵你追求更高更遠。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;參與開發者年會是一個值得投資時間、金錢和精力的事情，它不僅可以幫助你提升自己在業界中的地位和影響力，也可以幫助你成長為一個更優秀更全面的開發者。&lt;/p&gt;

&lt;h1 id=&quot;iplayground-簡介&quot;&gt;iPlayground 簡介&lt;/h1&gt;

&lt;p&gt;iPlayground 是一個台灣的 Swift 社群，每年舉辦一場專注於蘋果軟體開發的研討會，邀請國內外的知名開發者分享 iOS/macOS、Swift/Objective-C、app 軟體開發、UI/UX 等相關主題。iPlayground 的歷史可以追溯到 2018 年，當時是台灣首場 iOS/macOS 開發者專門的技術研討會，並邀請了 zonble 與 yllan 作為 keynote speaker。2019 年，iPlayground 擴大規模，邀請了海外開發者如王巍 (@onevcat) 和 Kishikawa Katsumi，並新增了 workshop 和 after party 等活動。2020 年，受到 COVID-19 疫情影響，iPlayground 調整成一日三軌的形式，並增加了 unconference 和 Ask Speaker 等互動環節。iPlayground 的官方網站是 https://iplayground.io ，可以找到過去和未來的活動資訊、議程錄影和贊助商等。&lt;/p&gt;

&lt;h1 id=&quot;相關資源&quot;&gt;相關資源&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://iplayground.io&quot;&gt;iPlayground 官網&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/@iPlaygroundTaiwan&quot;&gt;iPlayground Youtube 頻道&lt;/a&gt;&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="swift" /><category term="swift" /><category term="programming" /><category term="iPlayground" /><summary type="html">這個消息，有公佈在 13 的電子報第 179 期，如果想要當 iPlayground 工作人員的朋友，歡迎在 13 的電子報上，進行回覆，就可以報名囉。</summary></entry><entry><title type="html">Edge 更新，這一版的 Edged 將 AI 功能直接放在側邊欄</title><link href="https://moonandeye.github.io/programming/2023/03/20/edge-update-embed-ai.html" rel="alternate" type="text/html" title="Edge 更新，這一版的 Edged 將 AI 功能直接放在側邊欄" /><published>2023-03-20T20:25:00+08:00</published><updated>2023-03-20T20:25:00+08:00</updated><id>https://moonandeye.github.io/programming/2023/03/20/edge-update-embed-ai</id><content type="html" xml:base="https://moonandeye.github.io/programming/2023/03/20/edge-update-embed-ai.html">&lt;p&gt;新版的 Edge 在側邊欄整合了 ai 的功能，包含 bing chat, 文章/文字生成器。&lt;/p&gt;

&lt;h1 id=&quot;microsoft-edge-新版瀏覽器將-ai-整合在側邊欄&quot;&gt;Microsoft Edge 新版瀏覽器將 AI 整合在側邊欄&lt;/h1&gt;

&lt;p&gt;Microsoft Edge 是一款基於 Chromium 的瀏覽器，提供了許多實用的功能，例如集成式 PDF 閱讀器、垂直分頁、密碼管理器等。最近，Microsoft Edge 又推出了一項新功能，就是將 AI 整合在側邊欄中，讓使用者可以在瀏覽網頁的同時，享受 AI 的智慧協助。&lt;/p&gt;

&lt;p&gt;這項新功能稱為 Edge Copilot，是由 Bing 提供的 ChatGPT 技術驅動的。ChatGPT 是一種基於深度學習的自然語言生成模型，可以根據使用者的輸入和上下文，產生流暢且有意義的文字回應。Edge Copilot 可以幫助使用者完成各種任務，例如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;摘要：將長篇的網頁內容壓縮成幾句話，幫助使用者快速掌握重點。&lt;/li&gt;
  &lt;li&gt;比較：將不同的產品或服務進行比較分析，幫助使用者做出選擇。&lt;/li&gt;
  &lt;li&gt;解釋：對於任何不清楚的概念或術語，提供清楚且易懂的解釋。&lt;/li&gt;
  &lt;li&gt;翻譯：將任何語言的文字轉換成使用者想要的語言。&lt;/li&gt;
  &lt;li&gt;代碼：對於程式設計師來說，可以幫助他們理解或轉換不同語言的代碼。&lt;/li&gt;
  &lt;li&gt;寫作：無論是撰寫筆記、郵件、報告還是文案，都可以幫助使用者改善文法、重新表達內容、擴充內容或生成內容。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Edge Copilot 的操作方式非常簡單。只要在工具列上點選 Bing 圖示，就可以打開側邊欄。在側邊欄中，使用者可以和 AI 進行聊天互動，並根據自己的需求輸入相關指令或問題。AI 會根據當前瀏覽的網頁和使用者的目標，提供智能建議和洞見。如果不需要使用 AI 功能，也可以隨時隱藏側邊欄。&lt;/p&gt;

&lt;p&gt;Edge Copilot 不僅提供了多種預設的提示模板，讓使用者可以快速啟動常用功能；也支持自定義提示模板，在任何網頁上都能靈活運用 AI 功能。此外，在保護隱私方面也有所考量，在與 AI 聊天時不會收集或儲存任何個人資料。&lt;/p&gt;

&lt;p&gt;Microsoft Edge 新版瀏覽器將 AI 整合在側邊欄中，是一項創新且實用的功能。它讓使用者可以在一個介面中完成多種任務，在提高效率和品質方面都有所幫助。&lt;/p&gt;

&lt;h2 id=&quot;和-bing-聊天&quot;&gt;和 Bing 聊天&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/programming/edge-update/edge_chat.jpeg&quot; alt=&quot;edge chat&quot; width=&quot;250&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;如果要產出一段文字除了可以調整-長-中-短以外還可以分用途&quot;&gt;如果要產出一段文字，除了可以調整 長 中 短，以外，還可以分用途&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/programming/edge-update/edge_create_blog.jpeg&quot; alt=&quot;edge create blog&quot; width=&quot;250&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;我們來試著產一篇新聞&quot;&gt;我們來試著產一篇新聞&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/programming/edge-update/edge_news.jpeg&quot; alt=&quot;edge news&quot; width=&quot;250&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;這邊，我們試著生產一篇 iPlayground 的新聞&lt;/p&gt;

&lt;p&gt;prmopt: 今年 Swift 社群會舉辦 iPlayground，請給我一篇關於這個 Swift 的研究會的新聞&lt;/p&gt;

&lt;h1 id=&quot;swift-社群-iplayground-將舉辦-2023-年度線上技術研討會&quot;&gt;Swift 社群 iPlayground 將舉辦 2023 年度線上技術研討會&lt;/h1&gt;

&lt;p&gt;Swift 社群 iPlayground 是台灣首度聚焦 Apple 相關軟體開發之大型技術研討會，自 2017 年起每年舉辦一次，邀請國內外知名的 Swift 開發者分享他們的經驗和心得。今年，由於疫情的影響，iPlayground 將以線上的方式進行，並將於 3 月 27 日至 28 日舉行。&lt;/p&gt;

&lt;p&gt;iPlayground 2023 的主題是「用你我都會的 Swift 語言寫出更多可能」，旨在展示 Swift 不僅是一種用於 iOS、macOS、watchOS 和 tvOS 的程式語言，也是一種通用、跨平台、高效能的程式語言，可以應用在各種領域，如後端開發、機器學習、物聯網等。本次研討會將有來自不同背景和領域的講者分享他們如何用 Swift 創造出令人驚豔的作品和解決方案。&lt;/p&gt;

&lt;p&gt;本次研討會將分成兩天進行，第一天將有四場精彩的 keynote 演講，分別是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「Swift 的演進與未來」：由 Swift 原始碼貢獻者之一的 John Doe 分享 Swift 的最新動態和未來規劃。&lt;/li&gt;
  &lt;li&gt;「用 Swift 寫出 LINE 聊天機器人」：由 LINE Taiwan 的 iOS 工程師鄭宇哲介紹如何利用 LINE Messaging API 和 Vapor 框架用 Swift 寫出一個可以回答問題和發送貼圖的聊天機器人。&lt;/li&gt;
  &lt;li&gt;「手把手帶你用 Clean Swift 重構 MVC, 並替核心程式碼撰寫單元測試」：由知名部落客 ChiaoTeng 分享他如何使用 Clean Swift 架構來改善傳統 MVC 模式下程式碼的可讀性和可測試性。&lt;/li&gt;
  &lt;li&gt;「用 SwiftUI 和 Combine 打造現代化 UI」：由 Apple Developer Academy 的學員陳昱廷展示如何使用 SwiftUI 和 Combine 兩個全新的框架來打造美觀且高效能的 UI。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第二天則將有六場深入淺出的 workshop ，讓參加者可以親自動手學習和實作各種 Swift 相關的技術和主題，例如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「SwiftUI 入門教學」：由 iPlayground 主辦人之一的 Tim Lee 帶領參加者從零開始學習 SwiftUI 的基礎知識和操作方法。&lt;/li&gt;
  &lt;li&gt;「使用 Core ML 和 Create ML 打造智慧型 App」：由 AI Taiwan 社群創辦人之一的王小明教授參加者如何使用 Core ML 和 Create ML 兩個 Apple 提供的框架來訓練和部署機器學習模型到 App 中。&lt;/li&gt;
  &lt;li&gt;「使用 Kitura 框架建立&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;雖然中間被截斷了，但還真的「產生」了一個會議，並包含了題目和講者。&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="programming" /><category term="programming" /><category term="life" /><summary type="html">新版的 Edge 在側邊欄整合了 ai 的功能，包含 bing chat, 文章/文字生成器。</summary></entry><entry><title type="html">瑞信將被收購，收購方為瑞銀集團</title><link href="https://moonandeye.github.io/finance/2023/03/20/CSGN-acquired.html" rel="alternate" type="text/html" title="瑞信將被收購，收購方為瑞銀集團" /><published>2023-03-20T17:05:00+08:00</published><updated>2023-03-20T17:05:00+08:00</updated><id>https://moonandeye.github.io/finance/2023/03/20/CSGN-acquired</id><content type="html" xml:base="https://moonandeye.github.io/finance/2023/03/20/CSGN-acquired.html">&lt;h2 id=&quot;瑞信將被收購收購方為瑞銀集團收購價為30億瑞士法郎&quot;&gt;瑞信將被收購，收購方為瑞銀集團，收購價為30億瑞士法郎&lt;/h2&gt;

&lt;p&gt;瑞士兩大銀行集團之一的瑞信集團（Credit Suisse Group）在遭受多起金融醜聞和巨額虧損後，終於在周日（3月19日）宣布被同業瑞銀集團（UBS Group）以30億瑞士法郎（32.5億美元）全股票交易的方式收購。這是一樁歷史性的併購交易，相當於每股只付出瑞信在2007年全盛時期1%的代價。這次收購將使瑞銀成為全球最大的財富管理公司之一，並結束了167年歷史的瑞信。&lt;/p&gt;

&lt;p&gt;這次收購是在瑞士政府和央行的強力推動下完成的，目的是防止信心危機威脅到全球金融市場。據報道，美國、英國和歐盟等主要金融監管機構也對這次交易表示支持和歡迎，認為有助於保障金融穩定。&lt;/p&gt;

&lt;p&gt;事實上，在宣布被收購之前，瑞信已陷入了深重的困境。自去年以來，該行就連續遭遇了多起重大風險事件，包括與美國專門投資失敗企業債券的基金Greensill Capital合作而造成數十億美元虧損；以及因投資美國家族辦公室Archegos Capital Management而爆發巨額爆倉事件。這些事件不僅使得該行股價暴跌近70%，還引發了客戶、員工、股東和監管部門的不滿和不信任。&lt;/p&gt;

&lt;p&gt;面對如此危急的局面，該行曾試圖通過裁員、出售資產、削減風險、提高資本等措施來挽回局面，但效果甚微。同時，該行也曾拒絕了多次來自同業或其他投資者的收購或合併提議，認為價格太低或者條件不利。然而，在政府和央行的壓力下，該行最終不得不接受了來自競爭對手瑞銀的低價收購。&lt;/p&gt;

&lt;p&gt;根據雙方公佈的交易細節，每22.48股瑞信股票可換1股瑞銀股票，相當於每股0.76瑞士法郎。此外，由於該行仍然面臨著巨額未清算債務和訴訟風險，因此交易還涉及到一系列複雜而昂貴的安排&lt;/p&gt;

&lt;p&gt;首先，瑞銀將向瑞信的債權人支付54億美元的現金，以清算其與Greensill Capital和Archegos Capital Management相關的未結算債務；其次，瑞銀將承擔瑞信所有的訴訟風險，包括與美國司法部門和其他監管機構的調查和罰款；最後，瑞銀將接收瑞信約160億瑞郎（約合173億美元）的額外一級資本（AT1）債券，也稱為可轉換可持續債券（CoCo Bond），這些債券在交易完成後將失去價值 。&lt;/p&gt;

&lt;p&gt;雙方表示，這次收購將創造出全球最大的財富管理公司之一，管理資產超過6萬億美元。此外，雙方還預計在未來三年內實現每年40億美元的成本節省。不過，這也意味著雙方將面臨大規模的裁員和重組。據估計，該交易可能影響到兩家公司共計10萬名員工中的2萬名。&lt;/p&gt;

&lt;p&gt;這次收購引發了市場和業界的廣泛關注和評論。有分析師認為，這是一個「不得已而為之」的救命稻草，反映了瑞信在金融危機中失去了自主權和競爭力。有些人則認為，這是一個「天作之合」的良好契機，展現了兩家公司在財富管理、投資銀行、私人銀行等領域的互補性和協同效應。還有些人則表示擔心，這次收購會減少市場上的競爭選擇和多元化服務 。&lt;/p&gt;

&lt;p&gt;無論如何，在全球金融市場動盪不安、風險事件頻發、監管壓力加大、科技變革加速等背景下，這次收購無疑是一個重要而具有代表性的案例。它不僅揭示了當前金融業面臨的挑戰和困境，也展示了金融業未來可能走向的發展趨勢和變革方向。&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="finance" /><category term="finance" /><category term="acquisition" /><category term="bank" /><summary type="html">瑞信將被收購，收購方為瑞銀集團，收購價為30億瑞士法郎</summary></entry><entry><title type="html">使用 ChatGPT 串接 ChatGPT：(2)</title><link href="https://moonandeye.github.io/chatgpt/using-chatgpt-connect-chatgpt2.html" rel="alternate" type="text/html" title="使用 ChatGPT 串接 ChatGPT：(2)" /><published>2023-03-20T13:03:00+08:00</published><updated>2023-03-20T13:03:00+08:00</updated><id>https://moonandeye.github.io/chatgpt/using-chatgpt-connect-chatgpt2</id><content type="html" xml:base="https://moonandeye.github.io/chatgpt/using-chatgpt-connect-chatgpt2.html">&lt;p&gt;在 &lt;a href=&quot;/chatgpt/using-chatgpt-connect-chatgpt1.html&quot;&gt;前一篇文章&lt;/a&gt;中，我們使用了 python 語言串接了 ChatGPT API。但我現在是個 iOS 開發者，所以會想要試試看能不能直接用 ChatGPT，省時省力(？)的幫我完成一個串接 ChatGPT 的 App。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;/chatgpt/using-chatgpt-connect-chatgpt1.html&quot;&gt;使用 ChatGPT 串接 ChatGPT：(1)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;開始用-chatgpt-產生-ios-app-程式碼&quot;&gt;開始用 ChatGPT 產生 iOS App 程式碼&lt;/h2&gt;

&lt;h2 id=&quot;先從-api-request-開始&quot;&gt;先從 api request 開始&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;問：
我已經有 ChatGPT 的 api key 了，請問怎麼用 Swift 串接 ChatGPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;答：
要使用 Swift 串接 ChatGPT，您可以使用以下步驟：

請確保您已經安裝了 Alamofire 套件，該套件可以讓您在 Swift 中輕鬆進行 HTTP 請求。

準備一個 HTTP POST 請求，並傳遞以下參數：

網址：https://api.openai.com/v1/engines/davinci-codex/completions
標題：Authorization
值：Bearer YOUR_API_KEY
標題：Content-Type
值：application/json
請求正文：{&quot;prompt&quot;: &quot;YOUR_PROMPT&quot;}
在這裡，YOUR_API_KEY 是您的 ChatGPT API 金鑰，YOUR_PROMPT 是您想要傳遞給 ChatGPT 的提示。

使用 Alamofire 套件發送 HTTP POST 請求，並處理返回的 JSON 格式回應：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import Alamofire

let apiURL = &quot;https://api.openai.com/v1/engines/davinci-codex/completions&quot;
let headers: HTTPHeaders = [
    &quot;Authorization&quot;: &quot;Bearer YOUR_API_KEY&quot;,
    &quot;Content-Type&quot;: &quot;application/json&quot;
]
let parameters: Parameters = [
    &quot;prompt&quot;: &quot;YOUR_PROMPT&quot;
]

AF.request(apiURL, method: .post, parameters: parameters, encoding: JSONEncoding.default, headers: headers).responseJSON { response in
    switch response.result {
    case .success(let value):
        // 處理返回的 JSON 格式回應
        if let json = value as? [String: Any],
            let choices = json[&quot;choices&quot;] as? [[String: Any]],
            let text = choices.first?[&quot;text&quot;] as? String {
            // 在這裡處理您收到的文本回應
            print(text)
        }
    case .failure(let error):
        // 在這裡處理 HTTP 請求失敗的錯誤
        print(error)
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;這樣您就可以使用 Swift 串接 ChatGPT 了。請注意，這只是一個簡單的範例，您可能需要根據您的具體需求進行更多調整和擴展。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;接下來加上一個簡單的畫面包含-prompt-輸入api-request-buttonresponse-呈現&quot;&gt;接下來加上一個簡單的畫面，包含 prompt 輸入，api request button，response 呈現&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;問：
幫我生成一個 iOS App 畫面，來串接 ChatGPT，畫面上要有個文字輸入框，這個輸入框的內容就是 ChatGPT API 的 prompt，下方有一個 button，按下去後會發送 api request。再下方要能顯示 ChatGPT回應的 response text。請使用 SwiftUI 來寫這個頁面
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;答：

import SwiftUI
import Alamofire

struct ContentView: View {
    @State var promptText: String = &quot;&quot;
    @State var responseText: String = &quot;&quot;
    let apiURL = &quot;https://api.openai.com/v1/engines/davinci-codex/completions&quot;
    let headers: HTTPHeaders = [
        &quot;Authorization&quot;: &quot;Bearer YOUR_API_KEY&quot;,
        &quot;Content-Type&quot;: &quot;application/json&quot;
    ]
    
    var body: some View {
        VStack {
            TextField(&quot;Enter prompt here&quot;, text: $promptText)
                .padding()
                .border(Color.gray)
            
            Button(action: {
                sendRequest()
            }) {
                Text(&quot;Send Request&quot;)
            }
            .padding()
            
            Text(responseText)
                .padding()
        }
    }
    
    func sendRequest() {
        let parameters: Parameters = [
            &quot;prompt&quot;: promptText
        ]
        
        AF.request(apiURL, method: .post, parameters: parameters, encoding: JSONEncoding.default, headers: headers).responseJSON { response in
            switch response.result {
            case .success(let value):
                if let json = value as? [String: Any],
                    let choices = json[&quot;choices&quot;] as? [[String: Any]],
                    let text = choices.first?[&quot;text&quot;] as? String {
                    DispatchQueue.main.async {
                        responseText = text
                    }
                }
            case .failure(let error):
                print(error)
            }
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在這個程式碼中，我們使用了 @State 屬性來管理 promptText 和 responseText 的狀態。當使用者輸入提示文本後，我們可以從 promptText 中取得輸入的值。當使用者按下“Send Request”按鈕時，我們會使用 Alamofire 發送一個 HTTP POST 請求，並處理返回的 JSON 格式回應，將回應文本更新到 responseText 中。最後，我們在畫面上顯示了這個回應文本。

請注意，此程式碼僅為示範，實際使用中可能需要添加更多的錯誤處理和用戶體驗。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;驗證-ai-寫出來的專案會不會動&quot;&gt;驗證 AI 寫出來的專案會不會動&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/swift/chatgpt/chatgpt-connect-ios-app.jpeg&quot; alt=&quot;ChatGPT 生出來的畫面&quot; width=&quot;250px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;畫面上看起來不錯，那我們就來試試看會不會動吧。我試著輸入”tell me a joke”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/swift/chatgpt/chatgpt-connect-codex-result.jpeg&quot; alt=&quot;原始 ChatGPT 的結果&quot; width=&quot;250px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;他出現了很奇怪的結果，所以我把原始 response print 出來看看&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;success({
    choices =     (
                {
            &quot;finish_reason&quot; = length;
            index = 0;
            logprobs = &quot;&amp;lt;null&amp;gt;&quot;;
            text = &quot;:\&quot;))\n            self.nw.append(utils.normalizeString&quot;;
        }
    );
    created = 1679291111;
    id = &quot;cmpl-6w2cRytpMNtkDeuiuH15Pl8qky62C&quot;;
    model = &quot;davinci-codex&quot;;
    object = &quot;text_completion&quot;;
    usage =     {
        &quot;completion_tokens&quot; = 16;
        &quot;prompt_tokens&quot; = 3;
        &quot;total_tokens&quot; = 19;
    };
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這時候，就需要開發者介入了，在他的 model 中，使用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;davinci-codex&lt;/code&gt; model，這並不是網頁版那個大家覺得好用的 model，所以我們對 endpoint 進行置換。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/// 置換前
    let apiURL = &quot;https://api.openai.com/v1/engines/davinci-codex/completions&quot;

/// 置換後
    let apiURL = &quot;https://api.openai.com/v1/engines/text-davinci-003/completions&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/swift/chatgpt/chatgpt-connect-davinci-result.jpeg&quot; alt=&quot;davinci 的結果&quot; width=&quot;250px&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;success({
    choices =     (
                {
            &quot;finish_reason&quot; = stop;
            index = 0;
            logprobs = &quot;&amp;lt;null&amp;gt;&quot;;
            text = &quot; feeling?\n\nI&apos;m feeling great thank you.&quot;;
        }
    );
    created = 1679290920;
    id = &quot;cmpl-6w2ZMgsKECySpi2OFONc9HX31FJm6&quot;;
    model = &quot;text-davinci-003&quot;;
    object = &quot;text_completion&quot;;
    usage =     {
        &quot;completion_tokens&quot; = 11;
        &quot;prompt_tokens&quot; = 3;
        &quot;total_tokens&quot; = 14;
    };
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;結論---這個階段人類開發者還是需要去看-chatgpt-的程式碼並進行-debug&quot;&gt;結論 - 這個階段，人類開發者還是需要去看 ChatGPT 的程式碼，並進行 debug&lt;/h2&gt;

&lt;p&gt;從上面的例子可以得到幾個結論&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;程式碼會動&lt;/li&gt;
  &lt;li&gt;UI 看起來符合最低 demo 的標準&lt;/li&gt;
  &lt;li&gt;但如果 prmopt 不夠精確，要經過調整才能得得人類預期的結果&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第三點這邊，我並不認為是單純是現在的 ChatGPT 的問題，畢竟，人類在溝通上，是省略了很多「已知」，或是直接假設對方「已知」的前提下，進行交談。或許在接下來的時間，人類會開始學著和 ChatGPT 進行溝通，改變人類自己的交談習慣，讓 ChatGPT 可以更快的了解人類要的結果。&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="swift" /><category term="Swift" /><category term="Programming" /><category term="AI" /><category term="ChatGPT" /><summary type="html">在 前一篇文章中，我們使用了 python 語言串接了 ChatGPT API。但我現在是個 iOS 開發者，所以會想要試試看能不能直接用 ChatGPT，省時省力(？)的幫我完成一個串接 ChatGPT 的 App。</summary></entry><entry><title type="html">台灣證交所網頁改版，RWD 網站設計</title><link href="https://moonandeye.github.io/finance/2023/03/20/twse-website-rwd.html" rel="alternate" type="text/html" title="台灣證交所網頁改版，RWD 網站設計" /><published>2023-03-20T11:54:00+08:00</published><updated>2023-03-20T11:54:00+08:00</updated><id>https://moonandeye.github.io/finance/2023/03/20/twse-website-rwd</id><content type="html" xml:base="https://moonandeye.github.io/finance/2023/03/20/twse-website-rwd.html">&lt;h2 id=&quot;證交所公告&quot;&gt;證交所公告&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.twse.com.tw/zh/about/news/news/content.html?ff80808186cea0de0186fce2babc0066&quot;&gt;證交所公告 link&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;證交所新聞稿&quot;&gt;證交所新聞稿&lt;/h2&gt;

&lt;p&gt;臺灣證券交易所股份有限公司 新聞稿
中華民國112年3月20日
資訊服務部
臺灣證券交易所官網全面改版為響應式(RWD)網站設計，於3月19日推
出
臺灣證券交易所官網為提升行動裝置使用者之操作體驗，強化網站友善度及互
動性，於今(2023)年3月19日將本公司官網全面改版為響應式(RWD)網站設計，取代
與電腦版不同頁面、網址，且屬老舊技術的行動版網站。依據流量分析統計，越來
越多人透過行動裝置來瀏覽本公司網頁，比例已超過50%。各類行動裝置的螢幕大
小、比例、操作習慣與使用電腦有所不同，如用手機看電腦規格的網頁，常需操作
放大縮小，以觀看內容。
本次改版採用響應式網頁設計(Responsive Web Design)，同一個網址上看到的內
容，在不同螢幕寬度(桌機、平版、手機)會自動適應產生不同的版面變化，圖像尺寸
和字體將更加利於行動裝置上瀏覽，所設計的網站連接和按鈕將更容易觸發點擊，
有著形象視覺一致、減少維護成本、集中網站流量、加高搜尋引擎結果排名與易於
使用者分享網站等優點。
以使用行動裝置瀏覽本公司官網報表為例：改版後，遇到較寬的報表時，會將
重要欄位(如證券代號、日期等)固定住，使用者透過手指左右拖拉即可依序看到表
格後面欄位的內容，同時亦可清楚知道目前瀏覽項目的證券代號或日期，充分落實
以使用者為中心的設計。
臺灣證券交易所透過優化網站使用者操作體驗(User Experience)，提升使用者網
站操作便利性、友善度及互動性，為持續吸引及服務國內外投資人投資臺灣資本市
場而努力。&lt;/p&gt;

&lt;h2 id=&quot;rwd-參考資料&quot;&gt;RWD 參考資料&lt;/h2&gt;

&lt;p&gt;RWD（Responsive Web Design）指的是設計能夠自動調整網站版面以適應不同的裝置大小和屏幕解析度的技術。現在越來越多的使用者通過移動設備上網，因此，RWD設計變得越來越重要。&lt;/p&gt;

&lt;p&gt;首先，RWD設計可以提供更好的使用者體驗。如果一個網站不能自動適應裝置大小，使用者就必須不斷地放大和縮小網頁，以找到他們需要的內容，這樣的體驗是非常糟糕的。相反，RWD設計可以讓網站適應不同的屏幕大小和裝置，使使用者能夠更輕鬆地尋找他們所需要的信息，提供更好的瀏覽體驗。&lt;/p&gt;

&lt;p&gt;其次，RWD設計可以提高網站的可用性。如果一個網站不能正確地顯示在移動設備上，那麼它就會失去一部分的受眾。這意味著使用者可能會因為網站不符合他們的期望而放棄訪問。而使用RWD設計可以確保網站可以適應不同的裝置和屏幕大小，讓更多的使用者能夠輕鬆訪問網站。&lt;/p&gt;

&lt;p&gt;最後，RWD設計還可以提高網站的SEO排名。由於Google等搜索引擎優先顯示適應不同設備的網站，因此使用RWD設計可以讓您的網站更容易在搜索引擎中被發現，並且在搜索排名上取得更好的成績。&lt;/p&gt;

&lt;p&gt;綜上所述，RWD設計是現代網站設計的重要組成部分，它可以提高網站的使用者體驗、可用性和SEO排名。如果您正在考慮重新設計您的網站，請務必考慮使用RWD設計，以提供最佳的網站體驗。&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="finance" /><category term="finance" /><category term="證交所" /><category term="RWD" /><summary type="html">證交所公告</summary></entry><entry><title type="html">小吃推薦：楊家紅豆餅-新北板橋江子翠</title><link href="https://moonandeye.github.io/life/2023/03/20/yang-red-been.html" rel="alternate" type="text/html" title="小吃推薦：楊家紅豆餅-新北板橋江子翠" /><published>2023-03-20T09:16:00+08:00</published><updated>2023-03-20T09:16:00+08:00</updated><id>https://moonandeye.github.io/life/2023/03/20/yang-red-been</id><content type="html" xml:base="https://moonandeye.github.io/life/2023/03/20/yang-red-been.html">&lt;p&gt;&lt;img src=&quot;/assets/life/food/yang_red_been.jpeg&quot; alt=&quot;楊家紅豆餅&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;楊家紅豆餅&quot;&gt;楊家紅豆餅&lt;/h2&gt;

&lt;h2 id=&quot;營業時間早上11點開始賣完為止&quot;&gt;營業時間：早上11點開始，賣完為止&lt;/h2&gt;

&lt;p&gt;這家紅豆餅店位於江子翠地區，已經經營十年以上。這家店的特色是他們只賣兩種口味的餅點：紅豆餅和奶油餅。但是這兩種口味都被做到了極致，令人回味無窮。&lt;/p&gt;

&lt;p&gt;紅豆餅的內餡香甜，且每一口都有紅豆的口感，而餅皮則是脆而不硬，口感非常好。奶油餅則是濃郁的奶油香氣和鬆軟的餅體融合在一起，給人一種非常獨特的口感。雖然店家只賣這兩種口味，但是每一種口味都非常優秀，是一種無法用言語形容的美味。&lt;/p&gt;

&lt;p&gt;此外，這家店的餅點使用的是優質的食材，每天限量販售也保證了餅點的新鮮度，因此如果您想嚐試這家店的餅點，建議您早一點來，以免向隅。&lt;/p&gt;

&lt;p&gt;總之，如果您對紅豆餅和奶油餅感興趣，不妨到這家店品嚐一下。我相信您一定不會失望。&lt;/p&gt;

&lt;iframe src=&quot;https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3615.2511399399245!2d121.46905985062942!3d25.025549883897703!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3442a83fa20267a7%3A0xa8542f3b1b1b8b!2z5qWK5a6257SF6LGG6aSF!5e0!3m2!1szh-TW!2stw!4v1679275706894!5m2!1szh-TW!2stw&quot; width=&quot;600&quot; height=&quot;450&quot; style=&quot;border:0;&quot; allowfullscreen=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer-when-downgrade&quot;&gt;&lt;/iframe&gt;</content><author><name>Marvin Lin</name></author><category term="life" /><category term="food" /><category term="美食" /><summary type="html"></summary></entry><entry><title type="html">使用 ChatGPT 串接 ChatGPT：(1)</title><link href="https://moonandeye.github.io/chatgpt/using-chatgpt-connect-chatgpt1.html" rel="alternate" type="text/html" title="使用 ChatGPT 串接 ChatGPT：(1)" /><published>2023-03-19T12:36:00+08:00</published><updated>2023-03-19T12:36:00+08:00</updated><id>https://moonandeye.github.io/chatgpt/using-chatgpt-connect-chatgpt1</id><content type="html" xml:base="https://moonandeye.github.io/chatgpt/using-chatgpt-connect-chatgpt1.html">&lt;h2 id=&quot;申請-chatgpt-api-key&quot;&gt;申請 ChatGPT api key&lt;/h2&gt;

&lt;p&gt;ChatGPT 是有開放 API 讓使用者串接的，申請是免費的，但免費額度的用量是 18 USD，或是三個月到期，之後就需要升級成 plus 才能繼續使用。詳細情況，建議關注 open.ai 的網站，因為上面的資訊才是最新且最正確的。&lt;/p&gt;

&lt;h3 id=&quot;openai-價格說明網頁&quot;&gt;&lt;a href=&quot;https://openai.com/pricing&quot;&gt;Open.ai 價格說明網頁&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;那麼，我們就開始串接 ChatGPT 了，要進行 client 的串接，我們需要 api key。&lt;/p&gt;

&lt;h3 id=&quot;申請-api-key的網頁&quot;&gt;&lt;a href=&quot;https://platform.openai.com/account/api-keys&quot;&gt;申請 api key的網頁&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;你可以在這個網頁申請 api key，記得，拿到 key 後要馬上找到地方存起來，不然就再也看不到 keys 了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;這個網頁也有提醒，api key 不要放在 client 端，也不要放在公開的 repo 上&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;接下來，我們就不斷的去問 ChatGPT，怎麼串接 ChatGPT。&lt;/p&gt;

&lt;h2 id=&quot;使用-chatgpt-來串接-chatgpt&quot;&gt;使用 ChatGPT 來串接 ChatGPT&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;問：
怎麼串接 ChatGPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;答：
要使用 ChatGPT API，您需要遵循以下步驟：

1 註冊 ChatGPT API 帳戶。前往 ChatGPT API 官方網站，點擊「註冊」按鈕，並填寫必要的註冊信息。

2 創建 API 金鑰。登錄到您的 ChatGPT API 帳戶後，創建一個新的 API 金鑰。API 金鑰是連接到 ChatGPT API 的唯一憑證，您需要使用它才能訪問 API 服務。

3 選擇適合的 API。ChatGPT API 提供了多個 API 功能，例如文字生成、對話系統、語言翻譯等。選擇適合您需求的 API。

4 創建 API 請求。使用您的 API 金鑰和適合的 API 端點創建 API 請求。API 端點是 API 服務的網址，您可以在 API 文檔中找到相關信息。在 API 請求中，您可以傳遞相應的參數和數據以訪問 API 服務。

5 處理 API 響應。一旦發送 API 請求，您會收到一個響應，其中包含 API 服務返回的結果。您可以根據響應中的數據進行下一步處理。

以上是使用 ChatGPT API 的一般步驟。您可以參考 ChatGPT API 官方文檔，以了解更多關於 API 的詳細信息，並且可以通過使用相關的庫和SDKs，使API集成更加容易。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;問：
給我一個串接 chat gpt 的範例
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;答：
好的，以下是一個使用 Python 語言，並且使用 ChatGPT API 文本生成功能的簡單範例：

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;答：
import openai
import os

# 設置 API 金鑰
openai.api_key = os.getenv(&quot;OPENAI_API_KEY&quot;)

# 準備 API 請求
prompt = &quot;Once upon a time,&quot;
model_engine = &quot;text-davinci-002&quot;
temperature = 0.5
max_tokens = 50

# 訪問 API 服務
response = openai.Completion.create(
    engine=model_engine,
    prompt=prompt,
    max_tokens=max_tokens,
    temperature=temperature,
)

# 處理 API 響應
generated_text = response.choices[0].text.strip()

# 輸出結果
print(generated_text)
這個範例會生成一段文本，該文本是在「Once upon a time,」這個開頭之後，使用 ChatGPT API 文本生成功能生成的。在這個例子中，我們使用了 openai Python 包，並且將 API 金鑰設置為環境變量。我們使用 openai.Completion.create 方法向 API 服務提交了一個文本生成的請求，並且通過處理 API 響應來獲得了生成的文本結果。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;直接拿-code-去跑的結果&quot;&gt;直接拿 code 去跑的結果&lt;/h2&gt;

&lt;p&gt;把 ChatGPT 給你的 Code 直接拿去跑，並照著指示換掉 api key，到底會不會動呢? 我們來看一下。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 結果

Traceback (most recent call last):
  File &quot;/Users/cm0679/5python/foo.py&quot;, line 14, in &amp;lt;module&amp;gt;
    response = openai.Completion.create(
  File &quot;/Users/cm0679/anaconda3/lib/python3.8/site-packages/openai/api_resources/completion.py&quot;, line 25, in create
    return super().create(*args, **kwargs)
  File &quot;/Users/cm0679/anaconda3/lib/python3.8/site-packages/openai/api_resources/abstract/engine_api_resource.py&quot;, line 149, in create
    ) = cls.__prepare_create_request(
  File &quot;/Users/cm0679/anaconda3/lib/python3.8/site-packages/openai/api_resources/abstract/engine_api_resource.py&quot;, line 106, in __prepare_create_request
    requestor = api_requestor.APIRequestor(
  File &quot;/Users/cm0679/anaconda3/lib/python3.8/site-packages/openai/api_requestor.py&quot;, line 130, in __init__
    self.api_key = key or util.default_api_key()
  File &quot;/Users/cm0679/anaconda3/lib/python3.8/site-packages/openai/util.py&quot;, line 186, in default_api_key
    raise openai.error.AuthenticationError(
openai.error.AuthenticationError: No API key provided. You can set your API key in code using &apos;openai.api_key = &amp;lt;API-KEY&amp;gt;&apos;, or you can set the environment variable OPENAI_API_KEY=&amp;lt;API-KEY&amp;gt;). If your API key is stored in a file, you can point the openai module at it with &apos;openai.api_key_path = &amp;lt;PATH&amp;gt;&apos;. You can generate API keys in the OpenAI web interface. See https://onboard.openai.com for details, or email support@openai.com if you have any questions.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我們得到了 AuthenticationError，從結果來看，一定是 api key 的設定有問題。但現在先不人工介入，我們先試試看 ChatGPT 能不能從這個結果給我一個改正後的 code。&lt;/p&gt;

&lt;h2 id=&quot;拿-error-的結果去問-chatgpt&quot;&gt;拿 Error 的結果去問 ChatGPT&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 問：
error message 如下
Traceback (most recent call last):
  File &quot;/Users/cm0679/5python/foo.py&quot;, line 14, in &amp;lt;module&amp;gt;
    response = openai.Completion.create(
  File &quot;/Users/cm0679/anaconda3/lib/python3.8/site-packages/openai/api_resources/completion.py&quot;, line 25, in create
    return super().create(*args, **kwargs)
  File &quot;/Users/cm0679/anaconda3/lib/python3.8/site-packages/openai/api_resources/abstract/engine_api_resource.py&quot;, line 149, in create
    ) = cls.__prepare_create_request(
  File &quot;/Users/cm0679/anaconda3/lib/python3.8/site-packages/openai/api_resources/abstract/engine_api_resource.py&quot;, line 106, in __prepare_create_request
    requestor = api_requestor.APIRequestor(
  File &quot;/Users/cm0679/anaconda3/lib/python3.8/site-packages/openai/api_requestor.py&quot;, line 130, in __init__
    self.api_key = key or util.default_api_key()
  File &quot;/Users/cm0679/anaconda3/lib/python3.8/site-packages/openai/util.py&quot;, line 186, in default_api_key
    raise openai.error.AuthenticationError(
openai.error.AuthenticationError: No API key provided. You can set your API key in code using &apos;openai.api_key = &amp;lt;API-KEY&amp;gt;&apos;, or you can set the environment variable OPENAI_API_KEY=&amp;lt;API-KEY&amp;gt;). If your API key is stored in a file, you can point the openai module at it with &apos;openai.api_key_path = &amp;lt;PATH&amp;gt;&apos;. You can generate API keys in the OpenAI web interface. See https://onboard.openai.com for details, or email support@openai.com if you have any questions.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 答：
這個錯誤信息顯示了在代碼中並沒有提供 ChatGPT API 金鑰。你需要設置你的 API 金鑰才能使用 ChatGPT API。你可以按照下列步驟操作：

訪問 OpenAI 控制台 (https://beta.openai.com/docs/quickstart)
創建一個帳戶 (如果你還沒有帳戶)
創建一個新的 API 金鑰 (https://beta.openai.com/docs/api-reference/authentication/create-api-key)
複製你的新 API 金鑰
在你的代碼中設置 openai.api_key 為你的 API 金鑰。
以下是代碼示例：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
python
Copy code
import openai

# 設置你的 API 金鑰
openai.api_key = &quot;YOUR_API_KEY_HERE&quot;

# 調用 ChatGPT API 文本生成功能
prompt = &quot;Once upon a time,&quot;
model_engine = &quot;text-davinci-002&quot;
temperature = 0.5
max_tokens = 50

response = openai.Completion.create(
    engine=model_engine,
    prompt=prompt,
    max_tokens=max_tokens,
    temperature=temperature,
)

# 處理 API 響應
generated_text = response.choices[0].text.strip()

# 輸出結果
print(generated_text)
請務必將 YOUR_API_KEY_HERE 替換為你自己的 ChatGPT API 金鑰。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這次，ChatGPT 換掉了設定 api key 的那一段&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 更換前
openai.api_key = os.getenv(&quot;OPENAI_API_KEY&quot;)

# 更換後
openai.api_key = &quot;YOUR_API_KEY_HERE&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然後，再跑一次，我們得到了&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# response：
here was a little girl who loved to read. She would spend hours upon hours reading books of all kinds. She loved the smell of old books and the way they made her feel.

One day, she came across a book that she had
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;得到了一個故事的結果，因為我們的 prmopt 為 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Once upon a time,&lt;/code&gt; 所以 ChatGPT 就把他接成一個故事了。&lt;/p&gt;

&lt;h2 id=&quot;chatgpt-api-的那些參數&quot;&gt;ChatGPT API 的那些參數&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;prompt = &quot;Once upon a time,&quot;
model_engine = &quot;text-davinci-002&quot;
temperature = 0.5
max_tokens = 50
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;prompt&quot;&gt;prompt&lt;/h3&gt;
&lt;p&gt;詠唱詞，ChatGPT 會依這個輸入，來回傳 response&lt;/p&gt;

&lt;h3 id=&quot;model_engin&quot;&gt;model_engin&lt;/h3&gt;
&lt;p&gt;使用的 ai model，模型的種類不同，建議從官網去找你想完成任務的模型。
注意，雖然 ChatGPT 給的是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text-davinci-002&lt;/code&gt; 但後面還有個 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text-davinci-003&lt;/code&gt;，然後2023年3月之後，還出了個 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gpt-3.5-turbo&lt;/code&gt;。每個模型的用途不同，能力也不同，請依使用場景去調整。&lt;/p&gt;

&lt;h3 id=&quot;temperature&quot;&gt;temperature&lt;/h3&gt;
&lt;p&gt;表示同樣的 prompt，給出一樣的 response 的機率，如果設定為 0，那一樣的 input 就會得到一樣的 response。調高一點，讓結果會不同。&lt;/p&gt;

&lt;h3 id=&quot;max_tokens&quot;&gt;max_tokens&lt;/h3&gt;
&lt;p&gt;token 可以想成是 response 的字數限制，每個模型的 max_token 都是不同的，所以調到 500，1000 都是可以的。注意，這和使用量有關，token 是算費用的。價格在下方的參考資料有列出來&lt;/p&gt;

&lt;h2 id=&quot;參考資料&quot;&gt;參考資料&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://openai.com/pricing&quot;&gt;open.ai pricing&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://platform.openai.com/docs/models&quot;&gt;API 可以選擇的 model 列表和 model 說明&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name>Marvin Lin</name></author><category term="swift" /><category term="swift" /><category term="programming" /><category term="ai" /><category term="chatgpt" /><category term="python" /><summary type="html">申請 ChatGPT api key</summary></entry></feed>